// Generated code for Python source for module 'Cython.Compiler.Pipeline'
// created by Nuitka version 0.5.20

// This code is in part copyright 2016 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_Cython$Compiler$Pipeline is a Python object pointer of module type.

// Note: For full compatibility with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_Cython$Compiler$Pipeline;
PyDictObject *moduledict_Cython$Compiler$Pipeline;

// The module constants used
static PyObject *const_str_digest_a07f1e52b116ab352a9850787396e6c8;
static PyObject *const_str_plain__specific_post_parse;
extern PyObject *const_str_plain_create_py_pipeline;
extern PyObject *const_str_plain_pxds;
extern PyObject *const_tuple_str_plain_time_tuple;
extern PyObject *const_str_plain_itertools;
extern PyObject *const_str_plain_create_pxd_pipeline;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain_pyx_pipeline;
extern PyObject *const_str_plain_module_node;
static PyObject *const_str_plain_evaluate_tree_assertions;
extern PyObject *const_str_plain_in_cinclude;
static PyObject *const_tuple_str_plain_context_str_plain_options_str_plain_result_tuple;
extern PyObject *const_str_digest_725e8123044bef1b6c84c1319cf2b97a;
extern PyObject *const_str_plain_CalculateQualifiedNamesTransform;
extern PyObject *const_str_plain_WithTransform;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_ExpandInplaceOperators;
extern PyObject *const_str_plain_EarlyReplaceBuiltinCalls;
static PyObject *const_tuple_1e042554fd6f8e8bcd280f7cbf4162ef_tuple;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_InlineDefNodeCalls;
extern PyObject *const_str_plain_tree;
extern PyObject *const_str_plain_defined_in_pxd;
extern PyObject *const_str_plain_Optimize;
extern PyObject *const_str_plain_AnalyseExpressionsTransform;
extern PyObject *const_str_plain_mangle;
extern PyObject *const_str_plain_utilcode;
extern PyObject *const_str_plain_err;
static PyObject *const_str_plain_inject_pxd_code_stage_factory;
static PyObject *const_str_plain_use_utility_code_definitions;
extern PyObject *const_str_plain_as_module;
extern PyObject *const_str_plain_gdb_debug;
extern PyObject *const_str_plain_entry;
static PyObject *const_tuple_e4330e1db466fdfc699886fdc0780553_tuple;
static PyObject *const_tuple_str_plain_root_str_plain_entry_str_plain_StatListNode_tuple;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_MarkOverflowingArithmetic;
static PyObject *const_str_plain_dumptree;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_plain_CodeGeneration;
static PyObject *const_tuple_8085bc802faef2744032b06ceeb23d94_tuple;
extern PyObject *const_str_plain_scope;
extern PyObject *const_str_plain_CreateClosureClasses;
extern PyObject *const_str_plain_report_error;
extern PyObject *const_str_plain_ParseTreeTransforms;
extern PyObject *const_str_plain_create_pyx_pipeline;
static PyObject *const_tuple_str_plain_pyx_str_plain_py_str_plain_pxd_tuple;
extern PyObject *const_str_plain_cls;
extern PyObject *const_str_plain_Options;
static PyObject *const_tuple_str_plain_DebugTransform_tuple;
extern PyObject *const_str_plain_cname;
extern PyObject *const_str_plain_Pipeline;
extern PyObject *const_str_plain_body;
static PyObject *const_tuple_362fcced81093dd517e0153de82a692d_tuple;
extern PyObject *const_str_plain_output_dir;
static PyObject *const_str_plain_parse_stage_factory;
extern PyObject *const_str_plain_stages;
static PyObject *const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple;
static PyObject *const_str_plain_debug_transform;
extern PyObject *const_tuple_true_tuple;
extern PyObject *const_str_plain_pos;
static PyObject *const_tuple_str_plain_EmbedSignature_tuple;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain_num_errors;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_str_plain_filtered_stages;
extern PyObject *const_str_plain_visit_AttributeNode;
static PyObject *const_tuple_str_plain_InlineDefNodeCalls_tuple;
extern PyObject *const_str_plain_root;
static PyObject *const_tuple_5748004415dd12898728f8f558bf9eae_tuple;
extern PyObject *const_tuple_tuple_empty_tuple;
extern PyObject *const_str_plain_time;
static PyObject *const_str_digest_095a20d5973a70df0f77628b6979e4d1;
extern PyObject *const_str_plain_FinalOptimizePhase;
extern PyObject *const_str_plain_stage;
extern PyObject *const_str_plain_options;
extern PyObject *const_str_plain_data;
static PyObject *const_tuple_str_plain_module_node_str_plain_options_str_plain_result_tuple;
extern PyObject *const_str_plain___package__;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_plain_add;
extern PyObject *const_str_plain_AlignFunctionDefinitions;
static PyObject *const_str_digest_f41b3d39d6000c17326ae3c2e6644094;
extern PyObject *const_tuple_str_plain_Options_tuple;
extern PyObject *const_str_plain_dep;
extern PyObject *const_str_plain_phase;
static PyObject *const_str_plain_generate_pyx_code_stage_factory;
extern PyObject *const_str_plain___qualname__;
extern PyObject *const_str_plain_IntroduceBufferAuxiliaryVars;
extern PyObject *const_str_plain_CythonDebugWriter;
static PyObject *const_tuple_708a222345984485897613753a00a555_tuple;
static PyObject *const_str_plain_parse_pxd_stage_factory;
extern PyObject *const_str_plain_t;
extern PyObject *const_str_plain_MarkClosureVisitor;
extern PyObject *const_str_plain_type_entry;
extern PyObject *const_tuple_false_tuple_empty_tuple;
extern PyObject *const_str_plain_use_utility_code;
extern PyObject *const_str_plain_SwitchTransform;
extern PyObject *const_str_plain_seen;
extern PyObject *const_str_plain_node;
static PyObject *const_str_digest_43100357bb1ebc653312230f63cd67b2;
extern PyObject *const_tuple_str_plain_StatListNode_tuple;
extern PyObject *const_str_plain_is_pxd;
static PyObject *const_str_plain_compsrc;
extern PyObject *const_str_plain_CompileError;
static PyObject *const_tuple_str_plain_RemoveUnreachableCode_str_plain_GilCheck_tuple;
static PyObject *const_str_plain_ControlFlowAnalysis;
static PyObject *const_tuple_d4f91388866136538a2c25c048caa8ea_tuple;
extern PyObject *const_str_plain_added;
static PyObject *const_tuple_str_plain_context_str_plain_parse_tuple;
static PyObject *const_str_plain_saved_cimport_from_pyx;
extern PyObject *const_str_plain_merge_in;
extern PyObject *const_str_digest_454ef293d7174a6d3e64d06e805470ad;
extern PyObject *const_str_plain_EmbedSignature;
extern PyObject *const_str_plain_ExtractPxdCode;
static PyObject *const_tuple_str_plain_ExtractPxdCode_tuple;
static PyObject *const_str_digest_2658a501bd6c823a047d9bc5d047ef55;
extern PyObject *const_str_plain_transform;
extern PyObject *const_str_plain_after;
extern PyObject *const_str_plain_AbortError;
extern PyObject *const_str_plain_compilation_source;
extern PyObject *const_tuple_str_plain_CythonTransform_tuple;
extern PyObject *const_str_plain_Nodes;
extern PyObject *const_str_plain_context;
static PyObject *const_str_plain_fake_pxd;
static PyObject *const_str_plain_UseUtilityCodeDefinitions;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_func_prefix;
extern PyObject *const_str_plain_enumerate;
extern PyObject *const_str_plain_prepare_utility_code;
static PyObject *const_str_digest_ebf1de03f96c7f61c209dd04c8eec8e9;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_IterationTransform;
static PyObject *const_str_plain_required_utility;
extern PyObject *const_str_plain_PostParse;
extern PyObject *const_str_plain_dump;
extern PyObject *const_str_plain_check_c_declarations;
extern PyObject *const_str_plain_AnalysedTreeTransforms;
static PyObject *const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple;
extern PyObject *const_str_plain___loader__;
extern PyObject *const_str_plain_name;
extern PyObject *const_str_plain_py;
static PyObject *const_str_digest_894dd887b95446df8fb995c57df0ee94;
extern PyObject *const_str_plain_stats;
static PyObject *const_str_plain_PrintTree;
extern PyObject *const_str_plain_AutoTestDictTransform;
extern PyObject *const_str_plain_GilCheck;
extern PyObject *const_str_plain_ModuleNode;
extern PyObject *const_tuple_str_plain_AutoTestDictTransform_tuple;
static PyObject *const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple;
extern PyObject *const_str_plain_error;
extern PyObject *const_str_plain_utility_code_definition;
extern PyObject *const_str_plain_InterpretCompilerDirectives;
static PyObject *const_str_plain_process_entry;
static PyObject *const_tuple_str_plain_CalculateQualifiedNamesTransform_tuple;
extern PyObject *const_str_plain_DebugTransform;
extern PyObject *const_str_plain_run_pipeline;
static PyObject *const_str_digest_28039f56d452e5b7e6ce32e2edf25948;
static PyObject *const_tuple_str_plain_ControlFlowAnalysis_tuple;
extern PyObject *const_tuple_str_plain_DebugWriter_tuple;
extern PyObject *const_str_plain_extern;
extern PyObject *const_str_plain_visibility;
static PyObject *const_str_digest_f04464ca57c76516a1207f71ce79e6d3;
extern PyObject *const_str_plain_TypeInference;
static PyObject *const_tuple_str_plain_context_str_plain_inject_utility_code_stage_tuple;
static PyObject *const_str_digest_9f2b825296c8566c21c81531d1eecfe9;
static PyObject *const_tuple_a33a9ebb66bf03403e3c69871d4160c1_tuple;
extern PyObject *const_str_plain_StatListNode;
extern PyObject *const_str_plain_DecoratorTransform;
static PyObject *const_tuple_dc5834648c1d9f6073c7e2589730eadb_tuple;
static PyObject *const_str_plain_abort_on_errors;
extern PyObject *const_str_plain_ParallelRangeTransform;
static PyObject *const_tuple_3506a7435cb202463746d995bc9350aa_tuple;
static PyObject *const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple;
extern PyObject *const_str_plain_gdb_debug_outputwriter;
extern PyObject *const_str_plain_utility_code;
static PyObject *const_str_plain__check_c_declarations;
static PyObject *const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_process_implementation;
static PyObject *const_str_plain_test_support;
static PyObject *const_tuple_str_plain_DropRefcountingTransform_tuple;
extern PyObject *const_str_plain_FlattenInListTransform;
extern PyObject *const_str_plain_TreeAssertVisitor;
extern PyObject *const_str_plain_FindInvalidUseOfFusedTypes;
extern PyObject *const_str_plain_Buffer;
static PyObject *const_str_plain_statlistnode;
extern PyObject *const_str_plain_AutoDocTransforms;
static PyObject *const_str_plain_inject_utility_code_stage_factory;
extern PyObject *const_str_plain_Visitor;
extern PyObject *const_dict_b04ac8cd9e2e0515f2c97f8c939bc3fe;
static PyObject *const_tuple_str_plain_ConstantFolding_str_plain_FlattenInListTransform_tuple;
extern PyObject *const_str_plain_initial_pos;
extern PyObject *const_str_plain_find_module;
extern PyObject *const_str_plain_ConstantFolding;
static PyObject *const_str_plain__align_function_definitions;
static PyObject *const_tuple_str_plain_TreeAssertVisitor_tuple;
extern PyObject *const_str_plain_type;
static PyObject *const_str_digest_3d6f0da3f5c61bebbd7dd3a959541047;
static PyObject *const_tuple_bee15a3a8e874089ab63d9db1be217b7_tuple;
static PyObject *const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple;
static PyObject *const_tuple_str_plain_context_str_plain_inject_pxd_code_stage_tuple;
static PyObject *const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple;
extern PyObject *const_tuple_str_plain_node_tuple;
extern PyObject *const_str_plain___cached__;
extern PyObject *const_str_plain___class__;
static PyObject *const_tuple_9578829614d5ffbf8eef824b05fc0e09_tuple;
extern PyObject *const_str_plain_pipeline;
static PyObject *const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple;
extern PyObject *const_tuple_none_tuple;
extern PyObject *const_str_plain_pyx;
extern PyObject *const_str_plain_CythonTransform;
static PyObject *const_tuple_a25f95f4dfa14785f7d978acb26fa8c8_tuple;
static PyObject *const_tuple_cbaa5839866cc28964240f174308e76b_tuple;
static PyObject *const_tuple_str_digest_f04464ca57c76516a1207f71ce79e6d3_tuple;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_source;
static PyObject *const_tuple_af880ffe8235e634c060617b51f523ed_tuple;
extern PyObject *const_str_plain_OptimizeBuiltinCalls;
extern PyObject *const_str_plain_merge_scope;
extern PyObject *const_str_plain_AnalyseDeclarationsTransform;
static PyObject *const_tuple_str_plain_ConstantFolding_str_plain_FinalOptimizePhase_tuple;
extern PyObject *const_int_pos_1;
static PyObject *const_tuple_00c469742b10624418228d9310be3574_tuple;
extern PyObject *const_str_plain_values;
extern PyObject *const_str_plain_cython_scope;
extern PyObject *const_str_plain_visit_NameNode;
extern PyObject *const_str_plain_module_name;
extern PyObject *const_str_plain_DebugWriter;
extern PyObject *const_tuple_str_plain_Errors_tuple;
extern PyObject *const_str_plain_AdjustDefByDirectives;
static PyObject *const_tuple_str_plain_self_str_plain_entry_str_plain_utility_code_tuple;
extern PyObject *const_str_plain_RemoveUnreachableCode;
extern PyObject *const_str_plain_before;
static PyObject *const_tuple_7df8e177cf846adf18baa69176ef079c_tuple;
extern PyObject *const_tuple_str_plain_t_tuple;
static PyObject *const_str_digest_68df991ed8d834526eccc7b4fa5bf2a7;
static PyObject *const_tuple_str_plain_PrintTree_tuple;
extern PyObject *const_str_plain_chain;
extern PyObject *const_str_plain_compiler_directives;
extern PyObject *const_str_plain_InternalError;
extern PyObject *const_str_plain_cimport_from_pyx;
extern PyObject *const_str_plain_target;
extern PyObject *const_str_plain_Debugger;
extern PyObject *const_str_plain_print;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_str_plain_entries;
extern PyObject *const_str_plain_ConsolidateOverflowCheck;
extern PyObject *const_str_plain_parse;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_Naming;
extern PyObject *const_str_plain_pxd;
extern PyObject *const_str_plain_get_tree;
extern PyObject *const_str_plain_DropRefcountingTransform;
extern PyObject *const_str_plain_printtree;
static PyObject *const_str_digest_a5f4f65a7c9adecf4c6831cff65c2a01;
extern PyObject *const_str_plain___call__;
extern PyObject *const_tuple_str_plain_Naming_tuple;
static PyObject *const_tuple_str_plain_ConsolidateOverflowCheck_tuple;
extern PyObject *const_str_plain_TestUtils;
extern PyObject *const_str_plain_create_pyx_as_pxd_pipeline;
extern PyObject *const_str_plain_TransformBuiltinMethods;
extern PyObject *const_str_plain_source_desc;
extern PyObject *const_str_plain_need_pxd;
extern PyObject *const_str_plain_PxdPostParse;
extern PyObject *const_str_plain_DebugFlags;
extern PyObject *const_str_plain_check_c_declarations_pxd;
static PyObject *const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple;
extern PyObject *const_list_empty;
static PyObject *const_str_plain_generate_pyx_code_stage;
extern PyObject *const_str_plain_utility_code_list;
extern PyObject *const_str_plain_requires;
extern PyObject *const_int_pos_2;
static PyObject *const_str_plain_FlowControl;
static PyObject *const_dict_68edf5efba76615c51c2b86e101af95d;
extern PyObject *const_str_plain_MarkParallelAssignments;
static PyObject *const_str_digest_d80340087fe4ac070886b161e37f7ea5;
static PyObject *const_dict_43b7f11ba74ce4fcbf5dd38e95803618;
extern PyObject *const_str_plain_NormalizeTree;
extern PyObject *const_str_plain_used;
extern PyObject *const_str_empty;
extern PyObject *const_str_plain_create_pipeline;
extern PyObject *const_str_plain_full_module_name;
extern PyObject *const_tuple_str_plain_DebugFlags_tuple;
extern PyObject *const_str_plain_debug_verbose_pipeline;
extern PyObject *const_str_plain_Errors;
extern PyObject *const_tuple_none_none_tuple;
static PyObject *const_str_plain_inject_utility_code_stage;
static PyObject *const_str_digest_e2a1171fb02c6a0e1759b89de5616e58;
static PyObject *const_tuple_str_plain_IntroduceBufferAuxiliaryVars_tuple;
static PyObject *const_str_plain_inject_pxd_code_stage;
extern PyObject *const_str_plain_ForwardDeclareTypes;
extern PyObject *const_str_plain_exclude_classes;
extern PyObject *const_str_plain_insert_into_pipeline;
extern PyObject *const_tuple_str_plain_self_str_plain_node_tuple;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_str_digest_a07f1e52b116ab352a9850787396e6c8 = UNSTREAM_STRING( &constant_bin[ 238532 ], 45, 0 );
    const_str_plain__specific_post_parse = UNSTREAM_STRING( &constant_bin[ 238577 ], 20, 1 );
    const_str_plain_pyx_pipeline = UNSTREAM_STRING( &constant_bin[ 238597 ], 12, 1 );
    const_str_plain_evaluate_tree_assertions = UNSTREAM_STRING( &constant_bin[ 111781 ], 24, 1 );
    const_tuple_str_plain_context_str_plain_options_str_plain_result_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_options_str_plain_result_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_options_str_plain_result_tuple, 1, const_str_plain_options ); Py_INCREF( const_str_plain_options );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_options_str_plain_result_tuple, 2, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_tuple_1e042554fd6f8e8bcd280f7cbf4162ef_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_1e042554fd6f8e8bcd280f7cbf4162ef_tuple, 0, const_str_plain_ExpandInplaceOperators ); Py_INCREF( const_str_plain_ExpandInplaceOperators );
    PyTuple_SET_ITEM( const_tuple_1e042554fd6f8e8bcd280f7cbf4162ef_tuple, 1, const_str_plain_ParallelRangeTransform ); Py_INCREF( const_str_plain_ParallelRangeTransform );
    const_str_plain_inject_pxd_code_stage_factory = UNSTREAM_STRING( &constant_bin[ 238609 ], 29, 1 );
    const_str_plain_use_utility_code_definitions = UNSTREAM_STRING( &constant_bin[ 238638 ], 28, 1 );
    const_tuple_e4330e1db466fdfc699886fdc0780553_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e4330e1db466fdfc699886fdc0780553_tuple, 0, const_str_plain_AnalyseExpressionsTransform ); Py_INCREF( const_str_plain_AnalyseExpressionsTransform );
    PyTuple_SET_ITEM( const_tuple_e4330e1db466fdfc699886fdc0780553_tuple, 1, const_str_plain_FindInvalidUseOfFusedTypes ); Py_INCREF( const_str_plain_FindInvalidUseOfFusedTypes );
    const_tuple_str_plain_root_str_plain_entry_str_plain_StatListNode_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_root_str_plain_entry_str_plain_StatListNode_tuple, 0, const_str_plain_root ); Py_INCREF( const_str_plain_root );
    PyTuple_SET_ITEM( const_tuple_str_plain_root_str_plain_entry_str_plain_StatListNode_tuple, 1, const_str_plain_entry ); Py_INCREF( const_str_plain_entry );
    PyTuple_SET_ITEM( const_tuple_str_plain_root_str_plain_entry_str_plain_StatListNode_tuple, 2, const_str_plain_StatListNode ); Py_INCREF( const_str_plain_StatListNode );
    const_str_plain_dumptree = UNSTREAM_STRING( &constant_bin[ 238666 ], 8, 1 );
    const_tuple_8085bc802faef2744032b06ceeb23d94_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_8085bc802faef2744032b06ceeb23d94_tuple, 0, const_str_plain_options ); Py_INCREF( const_str_plain_options );
    PyTuple_SET_ITEM( const_tuple_8085bc802faef2744032b06ceeb23d94_tuple, 1, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_plain_generate_pyx_code_stage = UNSTREAM_STRING( &constant_bin[ 238674 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_8085bc802faef2744032b06ceeb23d94_tuple, 2, const_str_plain_generate_pyx_code_stage ); Py_INCREF( const_str_plain_generate_pyx_code_stage );
    const_tuple_str_plain_pyx_str_plain_py_str_plain_pxd_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_pyx_str_plain_py_str_plain_pxd_tuple, 0, const_str_plain_pyx ); Py_INCREF( const_str_plain_pyx );
    PyTuple_SET_ITEM( const_tuple_str_plain_pyx_str_plain_py_str_plain_pxd_tuple, 1, const_str_plain_py ); Py_INCREF( const_str_plain_py );
    PyTuple_SET_ITEM( const_tuple_str_plain_pyx_str_plain_py_str_plain_pxd_tuple, 2, const_str_plain_pxd ); Py_INCREF( const_str_plain_pxd );
    const_tuple_str_plain_DebugTransform_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_DebugTransform_tuple, 0, const_str_plain_DebugTransform ); Py_INCREF( const_str_plain_DebugTransform );
    const_tuple_362fcced81093dd517e0153de82a692d_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_362fcced81093dd517e0153de82a692d_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_362fcced81093dd517e0153de82a692d_tuple, 1, const_str_plain_scope ); Py_INCREF( const_str_plain_scope );
    PyTuple_SET_ITEM( const_tuple_362fcced81093dd517e0153de82a692d_tuple, 2, const_str_plain_module_name ); Py_INCREF( const_str_plain_module_name );
    PyTuple_SET_ITEM( const_tuple_362fcced81093dd517e0153de82a692d_tuple, 3, const_str_plain_parse ); Py_INCREF( const_str_plain_parse );
    const_str_plain_parse_stage_factory = UNSTREAM_STRING( &constant_bin[ 238697 ], 19, 1 );
    const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, 0, const_str_plain_WithTransform ); Py_INCREF( const_str_plain_WithTransform );
    PyTuple_SET_ITEM( const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, 1, const_str_plain_NormalizeTree ); Py_INCREF( const_str_plain_NormalizeTree );
    PyTuple_SET_ITEM( const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, 2, const_str_plain_PostParse ); Py_INCREF( const_str_plain_PostParse );
    PyTuple_SET_ITEM( const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, 3, const_str_plain_PxdPostParse ); Py_INCREF( const_str_plain_PxdPostParse );
    const_str_plain_debug_transform = UNSTREAM_STRING( &constant_bin[ 238716 ], 15, 1 );
    const_tuple_str_plain_EmbedSignature_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_EmbedSignature_tuple, 0, const_str_plain_EmbedSignature ); Py_INCREF( const_str_plain_EmbedSignature );
    const_str_plain_filtered_stages = UNSTREAM_STRING( &constant_bin[ 238731 ], 15, 1 );
    const_tuple_str_plain_InlineDefNodeCalls_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_InlineDefNodeCalls_tuple, 0, const_str_plain_InlineDefNodeCalls ); Py_INCREF( const_str_plain_InlineDefNodeCalls );
    const_tuple_5748004415dd12898728f8f558bf9eae_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 238746 ], 998 );
    const_str_digest_095a20d5973a70df0f77628b6979e4d1 = UNSTREAM_STRING( &constant_bin[ 239744 ], 39, 0 );
    const_tuple_str_plain_module_node_str_plain_options_str_plain_result_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_module_node_str_plain_options_str_plain_result_tuple, 0, const_str_plain_module_node ); Py_INCREF( const_str_plain_module_node );
    PyTuple_SET_ITEM( const_tuple_str_plain_module_node_str_plain_options_str_plain_result_tuple, 1, const_str_plain_options ); Py_INCREF( const_str_plain_options );
    PyTuple_SET_ITEM( const_tuple_str_plain_module_node_str_plain_options_str_plain_result_tuple, 2, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_digest_f41b3d39d6000c17326ae3c2e6644094 = UNSTREAM_STRING( &constant_bin[ 239783 ], 44, 0 );
    const_str_plain_generate_pyx_code_stage_factory = UNSTREAM_STRING( &constant_bin[ 239827 ], 31, 1 );
    const_tuple_708a222345984485897613753a00a555_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_708a222345984485897613753a00a555_tuple, 0, const_str_plain_module_node ); Py_INCREF( const_str_plain_module_node );
    PyTuple_SET_ITEM( const_tuple_708a222345984485897613753a00a555_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_plain_statlistnode = UNSTREAM_STRING( &constant_bin[ 239858 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_708a222345984485897613753a00a555_tuple, 2, const_str_plain_statlistnode ); Py_INCREF( const_str_plain_statlistnode );
    PyTuple_SET_ITEM( const_tuple_708a222345984485897613753a00a555_tuple, 3, const_str_plain_scope ); Py_INCREF( const_str_plain_scope );
    PyTuple_SET_ITEM( const_tuple_708a222345984485897613753a00a555_tuple, 4, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    const_str_plain_parse_pxd_stage_factory = UNSTREAM_STRING( &constant_bin[ 239870 ], 23, 1 );
    const_str_digest_43100357bb1ebc653312230f63cd67b2 = UNSTREAM_STRING( &constant_bin[ 239893 ], 34, 0 );
    const_str_plain_compsrc = UNSTREAM_STRING( &constant_bin[ 239927 ], 7, 1 );
    const_tuple_str_plain_RemoveUnreachableCode_str_plain_GilCheck_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RemoveUnreachableCode_str_plain_GilCheck_tuple, 0, const_str_plain_RemoveUnreachableCode ); Py_INCREF( const_str_plain_RemoveUnreachableCode );
    PyTuple_SET_ITEM( const_tuple_str_plain_RemoveUnreachableCode_str_plain_GilCheck_tuple, 1, const_str_plain_GilCheck ); Py_INCREF( const_str_plain_GilCheck );
    const_str_plain_ControlFlowAnalysis = UNSTREAM_STRING( &constant_bin[ 239288 ], 19, 1 );
    const_tuple_d4f91388866136538a2c25c048caa8ea_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_d4f91388866136538a2c25c048caa8ea_tuple, 0, const_str_plain_EarlyReplaceBuiltinCalls ); Py_INCREF( const_str_plain_EarlyReplaceBuiltinCalls );
    PyTuple_SET_ITEM( const_tuple_d4f91388866136538a2c25c048caa8ea_tuple, 1, const_str_plain_OptimizeBuiltinCalls ); Py_INCREF( const_str_plain_OptimizeBuiltinCalls );
    const_tuple_str_plain_context_str_plain_parse_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_parse_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_parse_tuple, 1, const_str_plain_parse ); Py_INCREF( const_str_plain_parse );
    const_str_plain_saved_cimport_from_pyx = UNSTREAM_STRING( &constant_bin[ 239934 ], 22, 1 );
    const_tuple_str_plain_ExtractPxdCode_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ExtractPxdCode_tuple, 0, const_str_plain_ExtractPxdCode ); Py_INCREF( const_str_plain_ExtractPxdCode );
    const_str_digest_2658a501bd6c823a047d9bc5d047ef55 = UNSTREAM_STRING( &constant_bin[ 239956 ], 34, 0 );
    const_str_plain_fake_pxd = UNSTREAM_STRING( &constant_bin[ 239819 ], 8, 1 );
    const_str_plain_UseUtilityCodeDefinitions = UNSTREAM_STRING( &constant_bin[ 238532 ], 25, 1 );
    const_str_digest_ebf1de03f96c7f61c209dd04c8eec8e9 = UNSTREAM_STRING( &constant_bin[ 239990 ], 245, 0 );
    const_str_plain_required_utility = UNSTREAM_STRING( &constant_bin[ 240235 ], 16, 1 );
    const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 0, const_str_plain_compsrc ); Py_INCREF( const_str_plain_compsrc );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 1, const_str_plain_source_desc ); Py_INCREF( const_str_plain_source_desc );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 2, const_str_plain_full_module_name ); Py_INCREF( const_str_plain_full_module_name );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 3, const_str_plain_initial_pos ); Py_INCREF( const_str_plain_initial_pos );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 4, const_str_plain_saved_cimport_from_pyx ); Py_INCREF( const_str_plain_saved_cimport_from_pyx );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 5, const_str_plain_scope ); Py_INCREF( const_str_plain_scope );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 6, const_str_plain_tree ); Py_INCREF( const_str_plain_tree );
    PyTuple_SET_ITEM( const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 7, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    const_str_digest_894dd887b95446df8fb995c57df0ee94 = UNSTREAM_STRING( &constant_bin[ 240251 ], 40, 0 );
    const_str_plain_PrintTree = UNSTREAM_STRING( &constant_bin[ 238782 ], 9, 1 );
    const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 1, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 2, const_str_plain_AlignFunctionDefinitions ); Py_INCREF( const_str_plain_AlignFunctionDefinitions );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 3, const_str_plain_MarkClosureVisitor ); Py_INCREF( const_str_plain_MarkClosureVisitor );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 4, const_str_plain_WithTransform ); Py_INCREF( const_str_plain_WithTransform );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 5, const_str_plain_AnalyseDeclarationsTransform ); Py_INCREF( const_str_plain_AnalyseDeclarationsTransform );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 6, const_str_plain_ConstantFolding ); Py_INCREF( const_str_plain_ConstantFolding );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 7, const_str_plain_FlattenInListTransform ); Py_INCREF( const_str_plain_FlattenInListTransform );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 8, const_str_plain_StatListNode ); Py_INCREF( const_str_plain_StatListNode );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 9, const_str_plain_pipeline ); Py_INCREF( const_str_plain_pipeline );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 10, const_str_plain_pyx_pipeline ); Py_INCREF( const_str_plain_pyx_pipeline );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 11, const_str_plain_stage ); Py_INCREF( const_str_plain_stage );
    PyTuple_SET_ITEM( const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 12, const_str_plain_fake_pxd ); Py_INCREF( const_str_plain_fake_pxd );
    const_str_plain_process_entry = UNSTREAM_STRING( &constant_bin[ 239770 ], 13, 1 );
    const_tuple_str_plain_CalculateQualifiedNamesTransform_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_CalculateQualifiedNamesTransform_tuple, 0, const_str_plain_CalculateQualifiedNamesTransform ); Py_INCREF( const_str_plain_CalculateQualifiedNamesTransform );
    const_str_digest_28039f56d452e5b7e6ce32e2edf25948 = UNSTREAM_STRING( &constant_bin[ 240291 ], 60, 0 );
    const_tuple_str_plain_ControlFlowAnalysis_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ControlFlowAnalysis_tuple, 0, const_str_plain_ControlFlowAnalysis ); Py_INCREF( const_str_plain_ControlFlowAnalysis );
    const_str_digest_f04464ca57c76516a1207f71ce79e6d3 = UNSTREAM_STRING( &constant_bin[ 240351 ], 14, 0 );
    const_tuple_str_plain_context_str_plain_inject_utility_code_stage_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_inject_utility_code_stage_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    const_str_plain_inject_utility_code_stage = UNSTREAM_STRING( &constant_bin[ 240365 ], 25, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_inject_utility_code_stage_tuple, 1, const_str_plain_inject_utility_code_stage ); Py_INCREF( const_str_plain_inject_utility_code_stage );
    const_str_digest_9f2b825296c8566c21c81531d1eecfe9 = UNSTREAM_STRING( &constant_bin[ 240390 ], 68, 0 );
    const_tuple_a33a9ebb66bf03403e3c69871d4160c1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a33a9ebb66bf03403e3c69871d4160c1_tuple, 0, const_str_plain_InterpretCompilerDirectives ); Py_INCREF( const_str_plain_InterpretCompilerDirectives );
    PyTuple_SET_ITEM( const_tuple_a33a9ebb66bf03403e3c69871d4160c1_tuple, 1, const_str_plain_TransformBuiltinMethods ); Py_INCREF( const_str_plain_TransformBuiltinMethods );
    const_tuple_dc5834648c1d9f6073c7e2589730eadb_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_dc5834648c1d9f6073c7e2589730eadb_tuple, 0, const_str_plain_AdjustDefByDirectives ); Py_INCREF( const_str_plain_AdjustDefByDirectives );
    PyTuple_SET_ITEM( const_tuple_dc5834648c1d9f6073c7e2589730eadb_tuple, 1, const_str_plain_AlignFunctionDefinitions ); Py_INCREF( const_str_plain_AlignFunctionDefinitions );
    const_str_plain_abort_on_errors = UNSTREAM_STRING( &constant_bin[ 240458 ], 15, 1 );
    const_tuple_3506a7435cb202463746d995bc9350aa_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3506a7435cb202463746d995bc9350aa_tuple, 0, const_str_plain_CreateClosureClasses ); Py_INCREF( const_str_plain_CreateClosureClasses );
    PyTuple_SET_ITEM( const_tuple_3506a7435cb202463746d995bc9350aa_tuple, 1, const_str_plain_MarkClosureVisitor ); Py_INCREF( const_str_plain_MarkClosureVisitor );
    PyTuple_SET_ITEM( const_tuple_3506a7435cb202463746d995bc9350aa_tuple, 2, const_str_plain_DecoratorTransform ); Py_INCREF( const_str_plain_DecoratorTransform );
    const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple, 0, const_str_plain_source_desc ); Py_INCREF( const_str_plain_source_desc );
    PyTuple_SET_ITEM( const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple, 1, const_str_plain_tree ); Py_INCREF( const_str_plain_tree );
    PyTuple_SET_ITEM( const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple, 2, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple, 3, const_str_plain_scope ); Py_INCREF( const_str_plain_scope );
    PyTuple_SET_ITEM( const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple, 4, const_str_plain_module_name ); Py_INCREF( const_str_plain_module_name );
    const_str_plain__check_c_declarations = UNSTREAM_STRING( &constant_bin[ 239644 ], 21, 1 );
    const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 0, const_str_plain_module_node ); Py_INCREF( const_str_plain_module_node );
    PyTuple_SET_ITEM( const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 1, const_str_plain_added ); Py_INCREF( const_str_plain_added );
    PyTuple_SET_ITEM( const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 2, const_str_plain_utilcode ); Py_INCREF( const_str_plain_utilcode );
    PyTuple_SET_ITEM( const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 3, const_str_plain_dep ); Py_INCREF( const_str_plain_dep );
    PyTuple_SET_ITEM( const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 4, const_str_plain_tree ); Py_INCREF( const_str_plain_tree );
    PyTuple_SET_ITEM( const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 5, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    const_str_plain_test_support = UNSTREAM_STRING( &constant_bin[ 240473 ], 12, 1 );
    const_tuple_str_plain_DropRefcountingTransform_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_DropRefcountingTransform_tuple, 0, const_str_plain_DropRefcountingTransform ); Py_INCREF( const_str_plain_DropRefcountingTransform );
    const_str_plain_inject_utility_code_stage_factory = UNSTREAM_STRING( &constant_bin[ 240390 ], 33, 1 );
    const_tuple_str_plain_ConstantFolding_str_plain_FlattenInListTransform_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ConstantFolding_str_plain_FlattenInListTransform_tuple, 0, const_str_plain_ConstantFolding ); Py_INCREF( const_str_plain_ConstantFolding );
    PyTuple_SET_ITEM( const_tuple_str_plain_ConstantFolding_str_plain_FlattenInListTransform_tuple, 1, const_str_plain_FlattenInListTransform ); Py_INCREF( const_str_plain_FlattenInListTransform );
    const_str_plain__align_function_definitions = UNSTREAM_STRING( &constant_bin[ 239689 ], 27, 1 );
    const_tuple_str_plain_TreeAssertVisitor_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_TreeAssertVisitor_tuple, 0, const_str_plain_TreeAssertVisitor ); Py_INCREF( const_str_plain_TreeAssertVisitor );
    const_str_digest_3d6f0da3f5c61bebbd7dd3a959541047 = UNSTREAM_STRING( &constant_bin[ 240485 ], 38, 0 );
    const_tuple_bee15a3a8e874089ab63d9db1be217b7_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_bee15a3a8e874089ab63d9db1be217b7_tuple, 0, const_str_plain_check_c_declarations ); Py_INCREF( const_str_plain_check_c_declarations );
    PyTuple_SET_ITEM( const_tuple_bee15a3a8e874089ab63d9db1be217b7_tuple, 1, const_str_plain_check_c_declarations_pxd ); Py_INCREF( const_str_plain_check_c_declarations_pxd );
    const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, 0, const_str_plain_AlignFunctionDefinitions ); Py_INCREF( const_str_plain_AlignFunctionDefinitions );
    PyTuple_SET_ITEM( const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, 1, const_str_plain_MarkClosureVisitor ); Py_INCREF( const_str_plain_MarkClosureVisitor );
    PyTuple_SET_ITEM( const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, 2, const_str_plain_WithTransform ); Py_INCREF( const_str_plain_WithTransform );
    PyTuple_SET_ITEM( const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, 3, const_str_plain_AnalyseDeclarationsTransform ); Py_INCREF( const_str_plain_AnalyseDeclarationsTransform );
    const_tuple_str_plain_context_str_plain_inject_pxd_code_stage_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_inject_pxd_code_stage_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    const_str_plain_inject_pxd_code_stage = UNSTREAM_STRING( &constant_bin[ 238609 ], 21, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_inject_pxd_code_stage_tuple, 1, const_str_plain_inject_pxd_code_stage ); Py_INCREF( const_str_plain_inject_pxd_code_stage );
    const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 1, const_str_plain_options ); Py_INCREF( const_str_plain_options );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 2, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 3, const_str_plain_py ); Py_INCREF( const_str_plain_py );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 4, const_str_plain_exclude_classes ); Py_INCREF( const_str_plain_exclude_classes );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 5, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 6, const_str_plain_test_support ); Py_INCREF( const_str_plain_test_support );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 7, const_str_plain_TreeAssertVisitor ); Py_INCREF( const_str_plain_TreeAssertVisitor );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 8, const_str_plain_DebugWriter ); Py_INCREF( const_str_plain_DebugWriter );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 9, const_str_plain_DebugTransform ); Py_INCREF( const_str_plain_DebugTransform );
    PyTuple_SET_ITEM( const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 10, const_str_plain_debug_transform ); Py_INCREF( const_str_plain_debug_transform );
    const_tuple_9578829614d5ffbf8eef824b05fc0e09_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_9578829614d5ffbf8eef824b05fc0e09_tuple, 0, const_str_plain_MarkParallelAssignments ); Py_INCREF( const_str_plain_MarkParallelAssignments );
    PyTuple_SET_ITEM( const_tuple_9578829614d5ffbf8eef824b05fc0e09_tuple, 1, const_str_plain_MarkOverflowingArithmetic ); Py_INCREF( const_str_plain_MarkOverflowingArithmetic );
    const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple, 1, const_str_plain_scope ); Py_INCREF( const_str_plain_scope );
    PyTuple_SET_ITEM( const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple, 2, const_str_plain_module_name ); Py_INCREF( const_str_plain_module_name );
    PyTuple_SET_ITEM( const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple, 3, const_str_plain_ExtractPxdCode ); Py_INCREF( const_str_plain_ExtractPxdCode );
    const_tuple_a25f95f4dfa14785f7d978acb26fa8c8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a25f95f4dfa14785f7d978acb26fa8c8_tuple, 0, const_str_plain_ForwardDeclareTypes ); Py_INCREF( const_str_plain_ForwardDeclareTypes );
    PyTuple_SET_ITEM( const_tuple_a25f95f4dfa14785f7d978acb26fa8c8_tuple, 1, const_str_plain_AnalyseDeclarationsTransform ); Py_INCREF( const_str_plain_AnalyseDeclarationsTransform );
    const_tuple_cbaa5839866cc28964240f174308e76b_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 0, const_str_plain_pipeline ); Py_INCREF( const_str_plain_pipeline );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 1, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 2, const_str_plain_printtree ); Py_INCREF( const_str_plain_printtree );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 3, const_str_plain_PrintTree ); Py_INCREF( const_str_plain_PrintTree );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 4, const_str_plain_error ); Py_INCREF( const_str_plain_error );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 5, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 6, const_str_plain_phase ); Py_INCREF( const_str_plain_phase );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 7, const_str_plain_t ); Py_INCREF( const_str_plain_t );
    PyTuple_SET_ITEM( const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 8, const_str_plain_err ); Py_INCREF( const_str_plain_err );
    const_tuple_str_digest_f04464ca57c76516a1207f71ce79e6d3_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_f04464ca57c76516a1207f71ce79e6d3_tuple, 0, const_str_digest_f04464ca57c76516a1207f71ce79e6d3 ); Py_INCREF( const_str_digest_f04464ca57c76516a1207f71ce79e6d3 );
    const_tuple_af880ffe8235e634c060617b51f523ed_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_af880ffe8235e634c060617b51f523ed_tuple, 0, const_str_plain_scope ); Py_INCREF( const_str_plain_scope );
    PyTuple_SET_ITEM( const_tuple_af880ffe8235e634c060617b51f523ed_tuple, 1, const_str_plain_target ); Py_INCREF( const_str_plain_target );
    PyTuple_SET_ITEM( const_tuple_af880ffe8235e634c060617b51f523ed_tuple, 2, const_str_plain_seen ); Py_INCREF( const_str_plain_seen );
    PyTuple_SET_ITEM( const_tuple_af880ffe8235e634c060617b51f523ed_tuple, 3, const_str_plain_entry ); Py_INCREF( const_str_plain_entry );
    PyTuple_SET_ITEM( const_tuple_af880ffe8235e634c060617b51f523ed_tuple, 4, const_str_plain_required_utility ); Py_INCREF( const_str_plain_required_utility );
    const_tuple_str_plain_ConstantFolding_str_plain_FinalOptimizePhase_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ConstantFolding_str_plain_FinalOptimizePhase_tuple, 0, const_str_plain_ConstantFolding ); Py_INCREF( const_str_plain_ConstantFolding );
    PyTuple_SET_ITEM( const_tuple_str_plain_ConstantFolding_str_plain_FinalOptimizePhase_tuple, 1, const_str_plain_FinalOptimizePhase ); Py_INCREF( const_str_plain_FinalOptimizePhase );
    const_tuple_00c469742b10624418228d9310be3574_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_00c469742b10624418228d9310be3574_tuple, 0, const_str_plain_CompileError ); Py_INCREF( const_str_plain_CompileError );
    PyTuple_SET_ITEM( const_tuple_00c469742b10624418228d9310be3574_tuple, 1, const_str_plain_InternalError ); Py_INCREF( const_str_plain_InternalError );
    PyTuple_SET_ITEM( const_tuple_00c469742b10624418228d9310be3574_tuple, 2, const_str_plain_AbortError ); Py_INCREF( const_str_plain_AbortError );
    const_tuple_str_plain_self_str_plain_entry_str_plain_utility_code_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_entry_str_plain_utility_code_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_entry_str_plain_utility_code_tuple, 1, const_str_plain_entry ); Py_INCREF( const_str_plain_entry );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_entry_str_plain_utility_code_tuple, 2, const_str_plain_utility_code ); Py_INCREF( const_str_plain_utility_code );
    const_tuple_7df8e177cf846adf18baa69176ef079c_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7df8e177cf846adf18baa69176ef079c_tuple, 0, const_str_plain_FlattenInListTransform ); Py_INCREF( const_str_plain_FlattenInListTransform );
    PyTuple_SET_ITEM( const_tuple_7df8e177cf846adf18baa69176ef079c_tuple, 1, const_str_plain_SwitchTransform ); Py_INCREF( const_str_plain_SwitchTransform );
    PyTuple_SET_ITEM( const_tuple_7df8e177cf846adf18baa69176ef079c_tuple, 2, const_str_plain_IterationTransform ); Py_INCREF( const_str_plain_IterationTransform );
    const_str_digest_68df991ed8d834526eccc7b4fa5bf2a7 = UNSTREAM_STRING( &constant_bin[ 240523 ], 27, 0 );
    const_tuple_str_plain_PrintTree_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_PrintTree_tuple, 0, const_str_plain_PrintTree ); Py_INCREF( const_str_plain_PrintTree );
    const_str_digest_a5f4f65a7c9adecf4c6831cff65c2a01 = UNSTREAM_STRING( &constant_bin[ 240550 ], 16, 0 );
    const_tuple_str_plain_ConsolidateOverflowCheck_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ConsolidateOverflowCheck_tuple, 0, const_str_plain_ConsolidateOverflowCheck ); Py_INCREF( const_str_plain_ConsolidateOverflowCheck );
    const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 0, const_str_plain_pipeline ); Py_INCREF( const_str_plain_pipeline );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 1, const_str_plain_transform ); Py_INCREF( const_str_plain_transform );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 2, const_str_plain_before ); Py_INCREF( const_str_plain_before );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 3, const_str_plain_after ); Py_INCREF( const_str_plain_after );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 4, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 5, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 6, const_str_plain_t ); Py_INCREF( const_str_plain_t );
    const_str_plain_FlowControl = UNSTREAM_STRING( &constant_bin[ 240566 ], 11, 1 );
    const_dict_68edf5efba76615c51c2b86e101af95d = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_68edf5efba76615c51c2b86e101af95d, const_str_plain_py, Py_True );
    assert( PyDict_Size( const_dict_68edf5efba76615c51c2b86e101af95d ) == 1 );
    const_str_digest_d80340087fe4ac070886b161e37f7ea5 = UNSTREAM_STRING( &constant_bin[ 240577 ], 26, 0 );
    const_dict_43b7f11ba74ce4fcbf5dd38e95803618 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_43b7f11ba74ce4fcbf5dd38e95803618, const_str_plain_merge_scope, Py_True );
    assert( PyDict_Size( const_dict_43b7f11ba74ce4fcbf5dd38e95803618 ) == 1 );
    const_str_digest_e2a1171fb02c6a0e1759b89de5616e58 = UNSTREAM_STRING( &constant_bin[ 240603 ], 64, 0 );
    const_tuple_str_plain_IntroduceBufferAuxiliaryVars_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_IntroduceBufferAuxiliaryVars_tuple, 0, const_str_plain_IntroduceBufferAuxiliaryVars ); Py_INCREF( const_str_plain_IntroduceBufferAuxiliaryVars );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_Cython$Compiler$Pipeline( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_6d54a748c440cba599df0062e2a11732;
static PyCodeObject *codeobj_366a0b04a257f76ffcd7d411796e20c2;
static PyCodeObject *codeobj_0a1d5dfb0748763652a6bb18ab8f84f6;
static PyCodeObject *codeobj_e131cbfebddadcb5d39c26cdbb24a43c;
static PyCodeObject *codeobj_afc289f7dd080a45aa2ed2d9ad91df2a;
static PyCodeObject *codeobj_47b990ebc745cc14aa03382e46660bf5;
static PyCodeObject *codeobj_156b0654155189bf270aa5bd689f1bb7;
static PyCodeObject *codeobj_226f06ad5974da6f07e4f967569543cc;
static PyCodeObject *codeobj_1214b9ecf6c00e901136477a5a3c3665;
static PyCodeObject *codeobj_0c5c7a190b84632f3c21d03fd83e0f78;
static PyCodeObject *codeobj_14874ce35a9f852dc4bb3954e34d4d90;
static PyCodeObject *codeobj_edde32cd35e620a543ddda709e1ca34b;
static PyCodeObject *codeobj_551b28d812e90173b403145d9fd18428;
static PyCodeObject *codeobj_9c9fd19bef320511b323c09d7401b40f;
static PyCodeObject *codeobj_583dc5a975da6ae6052ddee60440c0cc;
static PyCodeObject *codeobj_93ab845dba21b6fe21f6f9cccf4e5d40;
static PyCodeObject *codeobj_bae742f65d1d6c0fc7ceea65dd90a4f3;
static PyCodeObject *codeobj_6cd51f416952a7d68824e5c693e01eca;
static PyCodeObject *codeobj_e2fabb57ddd861887d6b8b5a41bd6316;
static PyCodeObject *codeobj_f11b6db3a396c985c212ef00de732e8a;
static PyCodeObject *codeobj_b1d9350d54b81fd0da48b8fb3fae76a1;
static PyCodeObject *codeobj_8664405c60af6f47ce46de87c60023d1;
static PyCodeObject *codeobj_78cddeb0c869935939a3106e808244b7;
static PyCodeObject *codeobj_3324bbeedfc0cca12d87bb73d748e5a3;
static PyCodeObject *codeobj_41f994bdd92b8ed42eb98eef4acd31e8;
static PyCodeObject *codeobj_016289b6af13d7d461be601f74a89ffd;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_68df991ed8d834526eccc7b4fa5bf2a7 );
    codeobj_6d54a748c440cba599df0062e2a11732 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Pipeline, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_366a0b04a257f76ffcd7d411796e20c2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___call__, 105, const_tuple_str_plain_self_str_plain_node_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0a1d5dfb0748763652a6bb18ab8f84f6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_abort_on_errors, 21, const_tuple_str_plain_node_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e131cbfebddadcb5d39c26cdbb24a43c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_pipeline, 128, const_tuple_5748004415dd12898728f8f558bf9eae_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_afc289f7dd080a45aa2ed2d9ad91df2a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_pxd_pipeline, 246, const_tuple_de6e1b743ea2e34ae2bb4aa352f2dc6f_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_47b990ebc745cc14aa03382e46660bf5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_py_pipeline, 257, const_tuple_str_plain_context_str_plain_options_str_plain_result_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_156b0654155189bf270aa5bd689f1bb7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_pyx_as_pxd_pipeline, 260, const_tuple_b73d2b0f4681a24a89a4a7456e7b96d1_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_226f06ad5974da6f07e4f967569543cc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_pyx_pipeline, 217, const_tuple_c2e002f87fb68fcc4fcb54bdc66eb724_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1214b9ecf6c00e901136477a5a3c3665 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_dumptree, 16, const_tuple_str_plain_t_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0c5c7a190b84632f3c21d03fd83e0f78 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_fake_pxd, 279, const_tuple_str_plain_root_str_plain_entry_str_plain_StatListNode_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_14874ce35a9f852dc4bb3954e34d4d90 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_generate_pyx_code_stage, 52, const_tuple_str_plain_module_node_str_plain_options_str_plain_result_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_edde32cd35e620a543ddda709e1ca34b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_generate_pyx_code_stage_factory, 51, const_tuple_8085bc802faef2744032b06ceeb23d94_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_551b28d812e90173b403145d9fd18428 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_inject_pxd_code_stage, 59, const_tuple_708a222345984485897613753a00a555_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_9c9fd19bef320511b323c09d7401b40f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_inject_pxd_code_stage_factory, 58, const_tuple_str_plain_context_str_plain_inject_pxd_code_stage_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_583dc5a975da6ae6052ddee60440c0cc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_inject_utility_code_stage, 82, const_tuple_5781aeb2f150f07bfb91c907247358c3_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_93ab845dba21b6fe21f6f9cccf4e5d40 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_inject_utility_code_stage_factory, 81, const_tuple_str_plain_context_str_plain_inject_utility_code_stage_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bae742f65d1d6c0fc7ceea65dd90a4f3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_insert_into_pipeline, 290, const_tuple_9a41a97a86ea9d33b93a8de719a973f0_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6cd51f416952a7d68824e5c693e01eca = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parse, 28, const_tuple_4b87a618da9122f7bacc2fb66465e035_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_e2fabb57ddd861887d6b8b5a41bd6316 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parse, 43, const_tuple_3bca88eb78ad8ddc41b7c82bd4807c3a_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_f11b6db3a396c985c212ef00de732e8a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parse_pxd_stage_factory, 42, const_tuple_362fcced81093dd517e0153de82a692d_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b1d9350d54b81fd0da48b8fb3fae76a1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parse_stage_factory, 27, const_tuple_str_plain_context_str_plain_parse_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8664405c60af6f47ce46de87c60023d1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_process_entry, 109, const_tuple_str_plain_self_str_plain_entry_str_plain_utility_code_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_78cddeb0c869935939a3106e808244b7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_run_pipeline, 314, const_tuple_cbaa5839866cc28964240f174308e76b_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3324bbeedfc0cca12d87bb73d748e5a3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_use_utility_code_definitions, 65, const_tuple_af880ffe8235e634c060617b51f523ed_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_41f994bdd92b8ed42eb98eef4acd31e8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_visit_AttributeNode, 115, const_tuple_str_plain_self_str_plain_node_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_016289b6af13d7d461be601f74a89ffd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_visit_NameNode, 119, const_tuple_str_plain_self_str_plain_node_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( PyObject **python_pars, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__bases, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__metaclass, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__prepared );


static PyObject *MAKE_FUNCTION_function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_12_create_py_pipeline_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_15_run_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_1_dumptree_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline( PyCellObject *closure_StatListNode );


static PyObject *MAKE_FUNCTION_function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_options, PyCellObject *closure_result );


static PyObject *MAKE_FUNCTION_function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context );


static PyObject *MAKE_FUNCTION_function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context );


static PyObject *MAKE_FUNCTION_function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context );


static PyObject *MAKE_FUNCTION_function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context, PyCellObject *closure_module_name, PyCellObject *closure_scope );


static PyObject *MAKE_FUNCTION_function_2_abort_on_errors_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline(  );


static PyObject *MAKE_FUNCTION_function_9_create_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults );


// The module function definitions.
static PyObject *impl_function_1_dumptree_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_t = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1214b9ecf6c00e901136477a5a3c3665, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_print );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_1 = par_t;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dump );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 18;
    tmp_args_element_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    Py_DECREF( tmp_called_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 18;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = par_t;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "t" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 19;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_t )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_t,
                    par_t
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_dumptree_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_t );
    par_t = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_t );
    par_t = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_dumptree_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_2_abort_on_errors_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_node = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0a1d5dfb0748763652a6bb18ab8f84f6, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Errors );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Errors );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Errors" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 23;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_num_errors );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_0;
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 23;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_AbortError );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AbortError );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "AbortError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 24;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 24;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_digest_f04464ca57c76516a1207f71ce79e6d3_tuple, 0 ) );

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 24;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 24;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_node,
                    par_node
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_node;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_2_abort_on_errors_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_node );
    Py_DECREF( par_node );
    par_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_node );
    Py_DECREF( par_node );
    par_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_2_abort_on_errors_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_context = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_parse = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline( par_context );
    assert( var_parse == NULL );
    var_parse = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_parse;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_3_parse_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_context );
    Py_DECREF( par_context );
    par_context = NULL;

    Py_XDECREF( var_parse );
    var_parse = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_3_parse_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_compsrc = python_pars[ 0 ];
    PyObject *var_source_desc = NULL;
    PyObject *var_full_module_name = NULL;
    PyObject *var_initial_pos = NULL;
    PyObject *var_saved_cimport_from_pyx = NULL;
    PyObject *var_scope = NULL;
    PyObject *var_tree = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6cd51f416952a7d68824e5c693e01eca, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_compsrc;

    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_source_desc );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 29;
        goto frame_exception_exit_1;
    }
    assert( var_source_desc == NULL );
    var_source_desc = tmp_assign_source_1;

    tmp_source_name_2 = par_compsrc;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "compsrc" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 30;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_full_module_name );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto frame_exception_exit_1;
    }
    assert( var_full_module_name == NULL );
    var_full_module_name = tmp_assign_source_2;

    tmp_assign_source_3 = PyTuple_New( 3 );
    tmp_tuple_element_1 = var_source_desc;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "source_desc" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 31;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_3, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_pos_1;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_3, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_0;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_3, 2, tmp_tuple_element_1 );
    assert( var_initial_pos == NULL );
    var_initial_pos = tmp_assign_source_3;

    // Tried code:
    tmp_iter_arg_1 = PyTuple_New( 2 );
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Options );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Options );
    }

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 32;
        goto try_except_handler_2;
    }

    tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_cimport_from_pyx );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        exception_lineno = 32;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = Py_False;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_2 );
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 32;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 32;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 32;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_2;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_2;
    }
    tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;

    assert( var_saved_cimport_from_pyx == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_saved_cimport_from_pyx = tmp_assign_source_7;

    tmp_assattr_name_1 = tmp_tuple_unpack_1__element_2;

    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Options );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Options );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 32;
        goto try_except_handler_2;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_cimport_from_pyx, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 32;
        goto try_except_handler_2;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_4 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_find_module );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_3 = var_full_module_name;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "full_module_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_3 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_pos;
    tmp_dict_value_1 = var_initial_pos;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "initial_pos" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_key_2 = const_str_plain_need_pxd;
    tmp_dict_value_2 = const_int_0;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 33;
    tmp_assign_source_8 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    assert( var_scope == NULL );
    var_scope = tmp_assign_source_8;

    tmp_assattr_name_2 = var_saved_cimport_from_pyx;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "saved_cimport_from_pyx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 34;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Options );

    if (unlikely( tmp_assattr_target_2 == NULL ))
    {
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Options );
    }

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 34;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_cimport_from_pyx, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 34;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 35;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_parse );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 35;
        goto frame_exception_exit_1;
    }
    tmp_args_name_2 = PyTuple_New( 2 );
    tmp_tuple_element_4 = var_source_desc;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "source_desc" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 35;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = var_scope;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "scope" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 35;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_4 );
    tmp_kw_name_2 = _PyDict_NewPresized( 2 );
    tmp_dict_key_3 = const_str_plain_pxd;
    tmp_dict_value_3 = const_int_0;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
    tmp_dict_key_4 = const_str_plain_full_module_name;
    tmp_dict_value_4 = var_full_module_name;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "full_module_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 35;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
    frame_function->f_lineno = 35;
    tmp_assign_source_9 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 35;
        goto frame_exception_exit_1;
    }
    assert( var_tree == NULL );
    var_tree = tmp_assign_source_9;

    tmp_assattr_name_3 = par_compsrc;

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "compsrc" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 36;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = var_tree;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_compilation_source, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_4 = var_scope;

    if ( tmp_assattr_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "scope" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 37;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_4 = var_tree;

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 37;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_scope, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_5 = Py_False;
    tmp_assattr_target_5 = var_tree;

    if ( tmp_assattr_target_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 38;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_is_pxd, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    tmp_return_value = var_tree;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_compsrc )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_compsrc,
                    par_compsrc
                );

                assert( res == 0 );
            }

            if ( var_source_desc )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_source_desc,
                    var_source_desc
                );

                assert( res == 0 );
            }

            if ( var_full_module_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_full_module_name,
                    var_full_module_name
                );

                assert( res == 0 );
            }

            if ( var_initial_pos )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_initial_pos,
                    var_initial_pos
                );

                assert( res == 0 );
            }

            if ( var_saved_cimport_from_pyx )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_saved_cimport_from_pyx,
                    var_saved_cimport_from_pyx
                );

                assert( res == 0 );
            }

            if ( var_scope )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_scope,
                    var_scope
                );

                assert( res == 0 );
            }

            if ( var_tree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tree,
                    var_tree
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_compsrc );
    par_compsrc = NULL;

    Py_XDECREF( var_source_desc );
    var_source_desc = NULL;

    Py_XDECREF( var_full_module_name );
    var_full_module_name = NULL;

    Py_XDECREF( var_initial_pos );
    var_initial_pos = NULL;

    Py_XDECREF( var_saved_cimport_from_pyx );
    var_saved_cimport_from_pyx = NULL;

    Py_XDECREF( var_scope );
    var_scope = NULL;

    Py_XDECREF( var_tree );
    var_tree = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_compsrc );
    par_compsrc = NULL;

    Py_XDECREF( var_source_desc );
    var_source_desc = NULL;

    Py_XDECREF( var_full_module_name );
    var_full_module_name = NULL;

    Py_XDECREF( var_initial_pos );
    var_initial_pos = NULL;

    Py_XDECREF( var_saved_cimport_from_pyx );
    var_saved_cimport_from_pyx = NULL;

    Py_XDECREF( var_scope );
    var_scope = NULL;

    Py_XDECREF( var_tree );
    var_tree = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_context = PyCell_NEW1( python_pars[ 0 ] );
    PyCellObject *par_scope = PyCell_NEW1( python_pars[ 1 ] );
    PyCellObject *par_module_name = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *var_parse = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline( par_context, par_module_name, par_scope );
    assert( var_parse == NULL );
    var_parse = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_parse;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_context );
    Py_DECREF( par_context );
    par_context = NULL;

    CHECK_OBJECT( (PyObject *)par_scope );
    Py_DECREF( par_scope );
    par_scope = NULL;

    CHECK_OBJECT( (PyObject *)par_module_name );
    Py_DECREF( par_module_name );
    par_module_name = NULL;

    Py_XDECREF( var_parse );
    var_parse = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_source_desc = python_pars[ 0 ];
    PyObject *var_tree = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e2fabb57ddd861887d6b8b5a41bd6316, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 44;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_parse );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_source_desc;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = PyCell_GET( self->m_closure[2] );

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "scope" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 44;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_pxd;
    tmp_dict_value_1 = Py_True;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_key_2 = const_str_plain_full_module_name;
    tmp_dict_value_2 = PyCell_GET( self->m_closure[1] );

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "module_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 45;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 45;
    tmp_assign_source_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 45;
        goto frame_exception_exit_1;
    }
    assert( var_tree == NULL );
    var_tree = tmp_assign_source_1;

    tmp_assattr_name_1 = PyCell_GET( self->m_closure[2] );

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "scope" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 46;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = var_tree;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_scope, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 46;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = Py_True;
    tmp_assattr_target_2 = var_tree;

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_is_pxd, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    tmp_return_value = var_tree;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 48;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_source_desc )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_source_desc,
                    par_source_desc
                );

                assert( res == 0 );
            }

            if ( var_tree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tree,
                    var_tree
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }

            if ( self->m_closure[2]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_scope,
                    self->m_closure[2]->ob_ref
                );

                assert( res == 0 );
            }

            if ( self->m_closure[1]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_module_name,
                    self->m_closure[1]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_source_desc );
    par_source_desc = NULL;

    Py_XDECREF( var_tree );
    var_tree = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_source_desc );
    par_source_desc = NULL;

    Py_XDECREF( var_tree );
    var_tree = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_options = PyCell_NEW1( python_pars[ 0 ] );
    PyCellObject *par_result = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *var_generate_pyx_code_stage = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline( par_options, par_result );
    assert( var_generate_pyx_code_stage == NULL );
    var_generate_pyx_code_stage = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_generate_pyx_code_stage;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_options );
    Py_DECREF( par_options );
    par_options = NULL;

    CHECK_OBJECT( (PyObject *)par_result );
    Py_DECREF( par_result );
    par_result = NULL;

    Py_XDECREF( var_generate_pyx_code_stage );
    var_generate_pyx_code_stage = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_module_node = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_14874ce35a9f852dc4bb3954e34d4d90, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_module_node;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_process_implementation );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 53;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = PyCell_GET( self->m_closure[0] );

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 53;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = PyCell_GET( self->m_closure[1] );

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "result" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 53;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 53;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 53;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_module_node;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 54;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_compilation_source );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = PyCell_GET( self->m_closure[1] );

    if ( tmp_assattr_target_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "result" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 54;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_compilation_source, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 54;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    tmp_return_value = PyCell_GET( self->m_closure[1] );

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "result" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 55;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_module_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_module_node,
                    par_module_node
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_options,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }

            if ( self->m_closure[1]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_result,
                    self->m_closure[1]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_module_node );
    par_module_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_module_node );
    par_module_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_context = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_inject_pxd_code_stage = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline( par_context );
    assert( var_inject_pxd_code_stage == NULL );
    var_inject_pxd_code_stage = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_inject_pxd_code_stage;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_context );
    Py_DECREF( par_context );
    par_context = NULL;

    Py_XDECREF( var_inject_pxd_code_stage );
    var_inject_pxd_code_stage = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_module_node = python_pars[ 0 ];
    PyObject *var_name = NULL;
    PyObject *var_statlistnode = NULL;
    PyObject *var_scope = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_551b28d812e90173b403145d9fd18428, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 60;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_pxds );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 60;
    tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 60;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 60;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 60;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_3;
    }
    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    {
        PyObject *old = var_name;
        var_name = tmp_assign_source_6;
        Py_INCREF( var_name );
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_3 = tmp_tuple_unpack_1__element_2;

    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 60;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 60;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    tmp_assign_source_10 = tmp_tuple_unpack_2__element_1;

    {
        PyObject *old = var_statlistnode;
        var_statlistnode = tmp_assign_source_10;
        Py_INCREF( var_statlistnode );
        Py_XDECREF( old );
    }

    tmp_assign_source_11 = tmp_tuple_unpack_2__element_2;

    {
        PyObject *old = var_scope;
        var_scope = tmp_assign_source_11;
        Py_INCREF( var_scope );
        Py_XDECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_3 = par_module_node;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_merge_in );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 61;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = var_statlistnode;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "statlistnode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 61;
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = var_scope;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "scope" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 61;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 61;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 61;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_module_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_module_node,
                    par_module_node
                );

                assert( res == 0 );
            }

            if ( var_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_name,
                    var_name
                );

                assert( res == 0 );
            }

            if ( var_statlistnode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_statlistnode,
                    var_statlistnode
                );

                assert( res == 0 );
            }

            if ( var_scope )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_scope,
                    var_scope
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = par_module_node;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_module_node );
    Py_DECREF( par_module_node );
    par_module_node = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_statlistnode );
    var_statlistnode = NULL;

    Py_XDECREF( var_scope );
    var_scope = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_module_node );
    par_module_node = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_statlistnode );
    var_statlistnode = NULL;

    Py_XDECREF( var_scope );
    var_scope = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_scope = python_pars[ 0 ];
    PyObject *par_target = python_pars[ 1 ];
    PyObject *par_seen = python_pars[ 2 ];
    PyObject *var_entry = NULL;
    PyObject *var_required_utility = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_compare_left_1 = par_seen;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_1 = PySet_New( NULL );
    {
        PyObject *old = par_seen;
        par_seen = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    branch_no_1:;
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_3324bbeedfc0cca12d87bb73d748e5a3, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = par_scope;

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_entries );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_values );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 69;
    tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 69;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_entry;
        var_entry = tmp_assign_source_4;
        Py_INCREF( var_entry );
        Py_XDECREF( old );
    }

    tmp_compare_left_2 = var_entry;

    tmp_compare_right_2 = par_seen;

    if ( tmp_compare_right_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "seen" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 70;
        goto try_except_handler_2;
    }

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    goto loop_start_1;
    branch_no_2:;
    tmp_source_name_3 = par_seen;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "seen" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        goto try_except_handler_2;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_add );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = var_entry;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 73;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_4 = var_entry;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 74;
        goto try_except_handler_2;
    }

    tmp_and_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_used );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 74;
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_5 = var_entry;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 74;
        goto try_except_handler_2;
    }

    tmp_and_right_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_utility_code_definition );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 74;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_6 = par_target;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_use_utility_code );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 75;
        goto try_except_handler_2;
    }
    tmp_source_name_7 = var_entry;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 75;
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_utility_code_definition );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 75;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 75;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 75;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_9 = var_entry;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 76;
        goto try_except_handler_2;
    }

    tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_utility_code_definition );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        goto try_except_handler_2;
    }
    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_requires );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        goto try_except_handler_2;
    }
    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 76;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_assign_source_7 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_required_utility;
        var_required_utility = tmp_assign_source_7;
        Py_INCREF( var_required_utility );
        Py_XDECREF( old );
    }

    tmp_source_name_10 = par_target;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "target" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 77;
        goto try_except_handler_3;
    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_use_utility_code );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        goto try_except_handler_3;
    }
    tmp_args_element_name_3 = var_required_utility;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "required_utility" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 77;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 77;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    goto branch_end_3;
    branch_no_3:;
    tmp_source_name_11 = var_entry;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 78;
        goto try_except_handler_2;
    }

    tmp_cond_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_as_module );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 78;
        goto try_except_handler_2;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 78;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_use_utility_code_definitions );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_use_utility_code_definitions );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "use_utility_code_definitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 79;
        goto try_except_handler_2;
    }

    tmp_source_name_12 = var_entry;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 79;
        goto try_except_handler_2;
    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_as_module );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 79;
        goto try_except_handler_2;
    }
    tmp_args_element_name_5 = par_target;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_args_element_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "target" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 79;
        goto try_except_handler_2;
    }

    tmp_args_element_name_6 = par_seen;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_args_element_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "seen" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 79;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 79;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 79;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    branch_end_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_scope )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_scope,
                    par_scope
                );

                assert( res == 0 );
            }

            if ( par_target )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_target,
                    par_target
                );

                assert( res == 0 );
            }

            if ( par_seen )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_seen,
                    par_seen
                );

                assert( res == 0 );
            }

            if ( var_entry )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_entry,
                    var_entry
                );

                assert( res == 0 );
            }

            if ( var_required_utility )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_required_utility,
                    var_required_utility
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_scope );
    par_scope = NULL;

    CHECK_OBJECT( (PyObject *)par_target );
    Py_DECREF( par_target );
    par_target = NULL;

    Py_XDECREF( par_seen );
    par_seen = NULL;

    Py_XDECREF( var_entry );
    var_entry = NULL;

    Py_XDECREF( var_required_utility );
    var_required_utility = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_scope );
    par_scope = NULL;

    Py_XDECREF( par_target );
    par_target = NULL;

    Py_XDECREF( par_seen );
    par_seen = NULL;

    Py_XDECREF( var_entry );
    var_entry = NULL;

    Py_XDECREF( var_required_utility );
    var_required_utility = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyCellObject *par_context = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_inject_utility_code_stage = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline( par_context );
    assert( var_inject_utility_code_stage == NULL );
    var_inject_utility_code_stage = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_inject_utility_code_stage;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_context );
    Py_DECREF( par_context );
    par_context = NULL;

    Py_XDECREF( var_inject_utility_code_stage );
    var_inject_utility_code_stage = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_module_node = python_pars[ 0 ];
    PyObject *var_added = NULL;
    PyObject *var_utilcode = NULL;
    PyObject *var_dep = NULL;
    PyObject *var_tree = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_583dc5a975da6ae6052ddee60440c0cc, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_module_node;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_prepare_utility_code );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 83;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_use_utility_code_definitions );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_use_utility_code_definitions );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "use_utility_code_definitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = PyCell_GET( self->m_closure[0] );

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_cython_scope );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_module_node;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_scope );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 84;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_1 = PyList_New( 0 );
    assert( var_added == NULL );
    var_added = tmp_assign_source_1;

    tmp_source_name_5 = par_module_node;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 88;
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_scope );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_utility_code_list );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 88;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_utilcode;
        var_utilcode = tmp_assign_source_4;
        Py_INCREF( var_utilcode );
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = var_utilcode;

    tmp_compare_right_1 = var_added;

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "added" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 89;
        goto try_except_handler_2;
    }

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    goto loop_start_1;
    branch_no_1:;
    tmp_source_name_6 = var_added;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "added" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 90;
        goto try_except_handler_2;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_append );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 90;
        goto try_except_handler_2;
    }
    tmp_args_element_name_3 = var_utilcode;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "utilcode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 90;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 90;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 90;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_7 = var_utilcode;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "utilcode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 91;
        goto try_except_handler_2;
    }

    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_requires );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 91;
        goto try_except_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 91;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_8 = var_utilcode;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "utilcode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 92;
        goto try_except_handler_2;
    }

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_requires );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto try_except_handler_2;
    }
    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 92;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_assign_source_7 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_dep;
        var_dep = tmp_assign_source_7;
        Py_INCREF( var_dep );
        Py_XDECREF( old );
    }

    tmp_compexpr_left_1 = var_dep;

    tmp_compexpr_right_1 = var_added;

    if ( tmp_compexpr_right_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "added" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 93;
        goto try_except_handler_3;
    }

    tmp_and_left_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_compexpr_left_2 = var_dep;

    if ( tmp_compexpr_left_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "dep" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 93;
        goto try_except_handler_3;
    }

    tmp_source_name_10 = par_module_node;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 93;
        goto try_except_handler_3;
    }

    tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_scope );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto try_except_handler_3;
    }
    tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_utility_code_list );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_compexpr_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto try_except_handler_3;
    }
    tmp_and_right_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_right_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto try_except_handler_3;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    assert( !(tmp_cond_truth_2 == -1) );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_13 = par_module_node;

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 94;
        goto try_except_handler_3;
    }

    tmp_source_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_scope );
    if ( tmp_source_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        goto try_except_handler_3;
    }
    tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_utility_code_list );
    Py_DECREF( tmp_source_name_12 );
    if ( tmp_source_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        goto try_except_handler_3;
    }
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_append );
    Py_DECREF( tmp_source_name_11 );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        goto try_except_handler_3;
    }
    tmp_args_element_name_4 = var_dep;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "dep" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 94;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 94;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    branch_no_2:;
    tmp_source_name_14 = var_utilcode;

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "utilcode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 95;
        goto try_except_handler_2;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_get_tree );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 95;
    tmp_assign_source_8 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_tree;
        var_tree = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_cond_value_3 = var_tree;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 96;
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_15 = par_module_node;

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 97;
        goto try_except_handler_2;
    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_merge_in );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_source_name_16 = var_tree;

    if ( tmp_source_name_16 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 97;
        goto try_except_handler_2;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_body );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 97;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_source_name_17 = var_tree;

    if ( tmp_source_name_17 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 97;
        goto try_except_handler_2;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_scope );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 97;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_43b7f11ba74ce4fcbf5dd38e95803618 );
    frame_function->f_lineno = 97;
    tmp_unused = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = par_module_node;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "module_node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_module_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_module_node,
                    par_module_node
                );

                assert( res == 0 );
            }

            if ( var_added )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_added,
                    var_added
                );

                assert( res == 0 );
            }

            if ( var_utilcode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_utilcode,
                    var_utilcode
                );

                assert( res == 0 );
            }

            if ( var_dep )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_dep,
                    var_dep
                );

                assert( res == 0 );
            }

            if ( var_tree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tree,
                    var_tree
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_module_node );
    par_module_node = NULL;

    Py_XDECREF( var_added );
    var_added = NULL;

    Py_XDECREF( var_utilcode );
    var_utilcode = NULL;

    Py_XDECREF( var_dep );
    var_dep = NULL;

    Py_XDECREF( var_tree );
    var_tree = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_module_node );
    par_module_node = NULL;

    Py_XDECREF( var_added );
    var_added = NULL;

    Py_XDECREF( var_utilcode );
    var_utilcode = NULL;

    Py_XDECREF( var_dep );
    var_dep = NULL;

    Py_XDECREF( var_tree );
    var_tree = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( PyObject **python_pars, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__bases, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__metaclass, PyObject *&closure_Cython$Compiler$Pipeline_class_creation_1__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___class__ = NULL;
    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___call__ = NULL;
    PyObject *var_process_entry = NULL;
    PyObject *var_visit_AttributeNode = NULL;
    PyObject *var_visit_NameNode = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_Cython$Compiler$Pipeline_class_creation_1__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_454ef293d7174a6d3e64d06e805470ad;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_UseUtilityCodeDefinitions;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );
    assert( var___call__ == NULL );
    var___call__ = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );
    assert( var_process_entry == NULL );
    var_process_entry = tmp_assign_source_4;

    tmp_assign_source_5 = MAKE_FUNCTION_function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );
    assert( var_visit_AttributeNode == NULL );
    var_visit_AttributeNode = tmp_assign_source_5;

    tmp_assign_source_6 = MAKE_FUNCTION_function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  );
    assert( var_visit_NameNode == NULL );
    var_visit_NameNode = tmp_assign_source_6;

    // Tried code:
    tmp_called_name_1 = closure_Cython$Compiler$Pipeline_class_creation_1__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_UseUtilityCodeDefinitions;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_Cython$Compiler$Pipeline_class_creation_1__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain___class__, var___class__ );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain___module__, var___module__ );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain___qualname__, var___qualname__ );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain___call__, var___call__ );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain_process_entry, var_process_entry );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain_visit_AttributeNode, var_visit_AttributeNode );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    tmp_result = MAPPING_SYNC_FROM_VARIABLE( tmp_tuple_element_1, const_str_plain_visit_NameNode, var_visit_NameNode );

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict;

    tmp_assign_source_7 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_7;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___class__ );
    Py_DECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___call__ );
    var___call__ = NULL;

    Py_XDECREF( var_process_entry );
    var_process_entry = NULL;

    Py_XDECREF( var_visit_AttributeNode );
    var_visit_AttributeNode = NULL;

    Py_XDECREF( var_visit_NameNode );
    var_visit_NameNode = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___call__ );
    var___call__ = NULL;

    Py_XDECREF( var_process_entry );
    var_process_entry = NULL;

    Py_XDECREF( var_visit_AttributeNode );
    var_visit_AttributeNode = NULL;

    Py_XDECREF( var_visit_NameNode );
    var_visit_NameNode = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_node = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_type_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_366a0b04a257f76ffcd7d411796e20c2, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_node;

    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_scope );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_scope, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_UseUtilityCodeDefinitions );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_UseUtilityCodeDefinitions );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "UseUtilityCodeDefinitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    if ( tmp_object_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___call__ );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_node;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 107;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 107;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_node,
                    par_node
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node );
    par_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node );
    par_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_entry = python_pars[ 1 ];
    PyObject *var_utility_code = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8664405c60af6f47ce46de87c60023d1, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_cond_value_1 = par_entry;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 110;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_iter_arg_1 = PyTuple_New( 2 );
    tmp_source_name_1 = par_entry;

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_utility_code );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_1 );
    tmp_source_name_2 = par_entry;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 111;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_utility_code_definition );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_1 );
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 111;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_utility_code;
        var_utility_code = tmp_assign_source_3;
        Py_INCREF( var_utility_code );
        Py_XDECREF( old );
    }

    tmp_cond_value_2 = var_utility_code;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_4 = par_self;

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_scope );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 113;
        goto try_except_handler_2;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_use_utility_code );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 113;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = var_utility_code;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "utility_code" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 113;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 113;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 113;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_entry )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_entry,
                    par_entry
                );

                assert( res == 0 );
            }

            if ( var_utility_code )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_utility_code,
                    var_utility_code
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_entry );
    par_entry = NULL;

    Py_XDECREF( var_utility_code );
    var_utility_code = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_entry );
    par_entry = NULL;

    Py_XDECREF( var_utility_code );
    var_utility_code = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_node = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_41f994bdd92b8ed42eb98eef4acd31e8, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_process_entry );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = par_node;

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_entry );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 116;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = par_node;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_node,
                    par_node
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node );
    par_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node );
    par_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_node = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_016289b6af13d7d461be601f74a89ffd, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_process_entry );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 120;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = par_node;

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_entry );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 120;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 120;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 120;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 121;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_process_entry );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 121;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = par_node;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 121;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_type_entry );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 121;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 121;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 121;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = par_node;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 122;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_node )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_node,
                    par_node
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node );
    par_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node );
    par_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_9_create_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_context = python_pars[ 0 ];
    PyObject *par_mode = python_pars[ 1 ];
    PyObject *par_exclude_classes = python_pars[ 2 ];
    PyObject *var_PrintTree = NULL;
    PyObject *var_WithTransform = NULL;
    PyObject *var_NormalizeTree = NULL;
    PyObject *var_PostParse = NULL;
    PyObject *var_PxdPostParse = NULL;
    PyObject *var_ForwardDeclareTypes = NULL;
    PyObject *var_AnalyseDeclarationsTransform = NULL;
    PyObject *var_AnalyseExpressionsTransform = NULL;
    PyObject *var_FindInvalidUseOfFusedTypes = NULL;
    PyObject *var_CreateClosureClasses = NULL;
    PyObject *var_MarkClosureVisitor = NULL;
    PyObject *var_DecoratorTransform = NULL;
    PyObject *var_InterpretCompilerDirectives = NULL;
    PyObject *var_TransformBuiltinMethods = NULL;
    PyObject *var_ExpandInplaceOperators = NULL;
    PyObject *var_ParallelRangeTransform = NULL;
    PyObject *var_CalculateQualifiedNamesTransform = NULL;
    PyObject *var_MarkParallelAssignments = NULL;
    PyObject *var_MarkOverflowingArithmetic = NULL;
    PyObject *var_AdjustDefByDirectives = NULL;
    PyObject *var_AlignFunctionDefinitions = NULL;
    PyObject *var_RemoveUnreachableCode = NULL;
    PyObject *var_GilCheck = NULL;
    PyObject *var_ControlFlowAnalysis = NULL;
    PyObject *var_AutoTestDictTransform = NULL;
    PyObject *var_EmbedSignature = NULL;
    PyObject *var_FlattenInListTransform = NULL;
    PyObject *var_SwitchTransform = NULL;
    PyObject *var_IterationTransform = NULL;
    PyObject *var_EarlyReplaceBuiltinCalls = NULL;
    PyObject *var_OptimizeBuiltinCalls = NULL;
    PyObject *var_InlineDefNodeCalls = NULL;
    PyObject *var_ConstantFolding = NULL;
    PyObject *var_FinalOptimizePhase = NULL;
    PyObject *var_DropRefcountingTransform = NULL;
    PyObject *var_ConsolidateOverflowCheck = NULL;
    PyObject *var_IntroduceBufferAuxiliaryVars = NULL;
    PyObject *var_check_c_declarations = NULL;
    PyObject *var_check_c_declarations_pxd = NULL;
    PyObject *var__check_c_declarations = NULL;
    PyObject *var__specific_post_parse = NULL;
    PyObject *var__align_function_definitions = NULL;
    PyObject *var_stages = NULL;
    PyObject *var_filtered_stages = NULL;
    PyObject *var_s = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_NotIn_1;
    int tmp_cmp_NotIn_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_globals_11;
    PyObject *tmp_import_globals_12;
    PyObject *tmp_import_globals_13;
    PyObject *tmp_import_globals_14;
    PyObject *tmp_import_globals_15;
    PyObject *tmp_import_globals_16;
    PyObject *tmp_import_globals_17;
    PyObject *tmp_import_globals_18;
    PyObject *tmp_import_globals_19;
    PyObject *tmp_import_globals_20;
    PyObject *tmp_import_globals_21;
    PyObject *tmp_import_globals_22;
    PyObject *tmp_import_globals_23;
    PyObject *tmp_import_globals_24;
    PyObject *tmp_import_globals_25;
    PyObject *tmp_import_globals_26;
    PyObject *tmp_import_globals_27;
    PyObject *tmp_import_globals_28;
    PyObject *tmp_import_globals_29;
    PyObject *tmp_import_globals_30;
    PyObject *tmp_import_globals_31;
    PyObject *tmp_import_globals_32;
    PyObject *tmp_import_globals_33;
    PyObject *tmp_import_globals_34;
    PyObject *tmp_import_globals_35;
    PyObject *tmp_import_globals_36;
    PyObject *tmp_import_globals_37;
    PyObject *tmp_import_globals_38;
    PyObject *tmp_import_globals_39;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_locals_4;
    PyObject *tmp_import_locals_5;
    PyObject *tmp_import_locals_6;
    PyObject *tmp_import_locals_7;
    PyObject *tmp_import_locals_8;
    PyObject *tmp_import_locals_9;
    PyObject *tmp_import_locals_10;
    PyObject *tmp_import_locals_11;
    PyObject *tmp_import_locals_12;
    PyObject *tmp_import_locals_13;
    PyObject *tmp_import_locals_14;
    PyObject *tmp_import_locals_15;
    PyObject *tmp_import_locals_16;
    PyObject *tmp_import_locals_17;
    PyObject *tmp_import_locals_18;
    PyObject *tmp_import_locals_19;
    PyObject *tmp_import_locals_20;
    PyObject *tmp_import_locals_21;
    PyObject *tmp_import_locals_22;
    PyObject *tmp_import_locals_23;
    PyObject *tmp_import_locals_24;
    PyObject *tmp_import_locals_25;
    PyObject *tmp_import_locals_26;
    PyObject *tmp_import_locals_27;
    PyObject *tmp_import_locals_28;
    PyObject *tmp_import_locals_29;
    PyObject *tmp_import_locals_30;
    PyObject *tmp_import_locals_31;
    PyObject *tmp_import_locals_32;
    PyObject *tmp_import_locals_33;
    PyObject *tmp_import_locals_34;
    PyObject *tmp_import_locals_35;
    PyObject *tmp_import_locals_36;
    PyObject *tmp_import_locals_37;
    PyObject *tmp_import_locals_38;
    PyObject *tmp_import_locals_39;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_import_name_from_10;
    PyObject *tmp_import_name_from_11;
    PyObject *tmp_import_name_from_12;
    PyObject *tmp_import_name_from_13;
    PyObject *tmp_import_name_from_14;
    PyObject *tmp_import_name_from_15;
    PyObject *tmp_import_name_from_16;
    PyObject *tmp_import_name_from_17;
    PyObject *tmp_import_name_from_18;
    PyObject *tmp_import_name_from_19;
    PyObject *tmp_import_name_from_20;
    PyObject *tmp_import_name_from_21;
    PyObject *tmp_import_name_from_22;
    PyObject *tmp_import_name_from_23;
    PyObject *tmp_import_name_from_24;
    PyObject *tmp_import_name_from_25;
    PyObject *tmp_import_name_from_26;
    PyObject *tmp_import_name_from_27;
    PyObject *tmp_import_name_from_28;
    PyObject *tmp_import_name_from_29;
    PyObject *tmp_import_name_from_30;
    PyObject *tmp_import_name_from_31;
    PyObject *tmp_import_name_from_32;
    PyObject *tmp_import_name_from_33;
    PyObject *tmp_import_name_from_34;
    PyObject *tmp_import_name_from_35;
    PyObject *tmp_import_name_from_36;
    PyObject *tmp_import_name_from_37;
    PyObject *tmp_import_name_from_38;
    PyObject *tmp_import_name_from_39;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e131cbfebddadcb5d39c26cdbb24a43c, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_mode;

    tmp_compare_right_1 = const_tuple_str_plain_pyx_str_plain_py_str_plain_pxd_tuple;
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_raise_type_1 = PyExc_AssertionError;
    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_lineno = 129;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_import_globals_1 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 130;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_Visitor, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_PrintTree_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_PrintTree );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    assert( var_PrintTree == NULL );
    var_PrintTree = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 131;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_2, tmp_import_locals_2, const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_WithTransform );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    assert( var_WithTransform == NULL );
    var_WithTransform = tmp_assign_source_2;

    tmp_import_globals_3 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 131;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_3, tmp_import_locals_3, const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_NormalizeTree );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    assert( var_NormalizeTree == NULL );
    var_NormalizeTree = tmp_assign_source_3;

    tmp_import_globals_4 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_4 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 131;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_4, tmp_import_locals_4, const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_4 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_PostParse );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    assert( var_PostParse == NULL );
    var_PostParse = tmp_assign_source_4;

    tmp_import_globals_5 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_5 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 131;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_5, tmp_import_locals_5, const_tuple_746cd5703c58fb9a5d8a832943ab9f66_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_5 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_PxdPostParse );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    assert( var_PxdPostParse == NULL );
    var_PxdPostParse = tmp_assign_source_5;

    tmp_import_globals_6 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_6 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 132;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_6, tmp_import_locals_6, const_tuple_a25f95f4dfa14785f7d978acb26fa8c8_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_6 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_ForwardDeclareTypes );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    assert( var_ForwardDeclareTypes == NULL );
    var_ForwardDeclareTypes = tmp_assign_source_6;

    tmp_import_globals_7 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_7 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 132;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_7, tmp_import_locals_7, const_tuple_a25f95f4dfa14785f7d978acb26fa8c8_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_7 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_AnalyseDeclarationsTransform );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    assert( var_AnalyseDeclarationsTransform == NULL );
    var_AnalyseDeclarationsTransform = tmp_assign_source_7;

    tmp_import_globals_8 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_8 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_8,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 133;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_8, tmp_import_locals_8, const_tuple_e4330e1db466fdfc699886fdc0780553_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_8 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_AnalyseExpressionsTransform );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    assert( var_AnalyseExpressionsTransform == NULL );
    var_AnalyseExpressionsTransform = tmp_assign_source_8;

    tmp_import_globals_9 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_9 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_9,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 133;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_9, tmp_import_locals_9, const_tuple_e4330e1db466fdfc699886fdc0780553_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_9 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_FindInvalidUseOfFusedTypes );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    assert( var_FindInvalidUseOfFusedTypes == NULL );
    var_FindInvalidUseOfFusedTypes = tmp_assign_source_9;

    tmp_import_globals_10 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_10 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_10,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 134;
    tmp_import_name_from_10 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_10, tmp_import_locals_10, const_tuple_3506a7435cb202463746d995bc9350aa_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_10 );
    if ( tmp_import_name_from_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_CreateClosureClasses );
    Py_DECREF( tmp_import_name_from_10 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        goto frame_exception_exit_1;
    }
    assert( var_CreateClosureClasses == NULL );
    var_CreateClosureClasses = tmp_assign_source_10;

    tmp_import_globals_11 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_11 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_11,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 134;
    tmp_import_name_from_11 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_11, tmp_import_locals_11, const_tuple_3506a7435cb202463746d995bc9350aa_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_11 );
    if ( tmp_import_name_from_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_MarkClosureVisitor );
    Py_DECREF( tmp_import_name_from_11 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        goto frame_exception_exit_1;
    }
    assert( var_MarkClosureVisitor == NULL );
    var_MarkClosureVisitor = tmp_assign_source_11;

    tmp_import_globals_12 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_12 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_12,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 134;
    tmp_import_name_from_12 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_12, tmp_import_locals_12, const_tuple_3506a7435cb202463746d995bc9350aa_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_12 );
    if ( tmp_import_name_from_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_DecoratorTransform );
    Py_DECREF( tmp_import_name_from_12 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        goto frame_exception_exit_1;
    }
    assert( var_DecoratorTransform == NULL );
    var_DecoratorTransform = tmp_assign_source_12;

    tmp_import_globals_13 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_13 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_13,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 135;
    tmp_import_name_from_13 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_13, tmp_import_locals_13, const_tuple_a33a9ebb66bf03403e3c69871d4160c1_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_13 );
    if ( tmp_import_name_from_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain_InterpretCompilerDirectives );
    Py_DECREF( tmp_import_name_from_13 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    assert( var_InterpretCompilerDirectives == NULL );
    var_InterpretCompilerDirectives = tmp_assign_source_13;

    tmp_import_globals_14 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_14 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_14,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 135;
    tmp_import_name_from_14 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_14, tmp_import_locals_14, const_tuple_a33a9ebb66bf03403e3c69871d4160c1_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_14 );
    if ( tmp_import_name_from_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_TransformBuiltinMethods );
    Py_DECREF( tmp_import_name_from_14 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 135;
        goto frame_exception_exit_1;
    }
    assert( var_TransformBuiltinMethods == NULL );
    var_TransformBuiltinMethods = tmp_assign_source_14;

    tmp_import_globals_15 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_15 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_15,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 136;
    tmp_import_name_from_15 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_15, tmp_import_locals_15, const_tuple_1e042554fd6f8e8bcd280f7cbf4162ef_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_15 );
    if ( tmp_import_name_from_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain_ExpandInplaceOperators );
    Py_DECREF( tmp_import_name_from_15 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto frame_exception_exit_1;
    }
    assert( var_ExpandInplaceOperators == NULL );
    var_ExpandInplaceOperators = tmp_assign_source_15;

    tmp_import_globals_16 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_16 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_16,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 136;
    tmp_import_name_from_16 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_16, tmp_import_locals_16, const_tuple_1e042554fd6f8e8bcd280f7cbf4162ef_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_16 );
    if ( tmp_import_name_from_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_16, const_str_plain_ParallelRangeTransform );
    Py_DECREF( tmp_import_name_from_16 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto frame_exception_exit_1;
    }
    assert( var_ParallelRangeTransform == NULL );
    var_ParallelRangeTransform = tmp_assign_source_16;

    tmp_import_globals_17 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_17 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_17,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 137;
    tmp_import_name_from_17 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_17, tmp_import_locals_17, const_tuple_str_plain_CalculateQualifiedNamesTransform_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_17 );
    if ( tmp_import_name_from_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_17, const_str_plain_CalculateQualifiedNamesTransform );
    Py_DECREF( tmp_import_name_from_17 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto frame_exception_exit_1;
    }
    assert( var_CalculateQualifiedNamesTransform == NULL );
    var_CalculateQualifiedNamesTransform = tmp_assign_source_17;

    tmp_import_globals_18 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_18 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_18,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 138;
    tmp_import_name_from_18 = IMPORT_MODULE( const_str_plain_TypeInference, tmp_import_globals_18, tmp_import_locals_18, const_tuple_9578829614d5ffbf8eef824b05fc0e09_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_18 );
    if ( tmp_import_name_from_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_18, const_str_plain_MarkParallelAssignments );
    Py_DECREF( tmp_import_name_from_18 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    assert( var_MarkParallelAssignments == NULL );
    var_MarkParallelAssignments = tmp_assign_source_18;

    tmp_import_globals_19 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_19 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_19,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 138;
    tmp_import_name_from_19 = IMPORT_MODULE( const_str_plain_TypeInference, tmp_import_globals_19, tmp_import_locals_19, const_tuple_9578829614d5ffbf8eef824b05fc0e09_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_19 );
    if ( tmp_import_name_from_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_19, const_str_plain_MarkOverflowingArithmetic );
    Py_DECREF( tmp_import_name_from_19 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    assert( var_MarkOverflowingArithmetic == NULL );
    var_MarkOverflowingArithmetic = tmp_assign_source_19;

    tmp_import_globals_20 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_20 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_20,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 139;
    tmp_import_name_from_20 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_20, tmp_import_locals_20, const_tuple_dc5834648c1d9f6073c7e2589730eadb_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_20 );
    if ( tmp_import_name_from_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_20 = IMPORT_NAME( tmp_import_name_from_20, const_str_plain_AdjustDefByDirectives );
    Py_DECREF( tmp_import_name_from_20 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    assert( var_AdjustDefByDirectives == NULL );
    var_AdjustDefByDirectives = tmp_assign_source_20;

    tmp_import_globals_21 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_21 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_21,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 139;
    tmp_import_name_from_21 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_21, tmp_import_locals_21, const_tuple_dc5834648c1d9f6073c7e2589730eadb_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_21 );
    if ( tmp_import_name_from_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_21 = IMPORT_NAME( tmp_import_name_from_21, const_str_plain_AlignFunctionDefinitions );
    Py_DECREF( tmp_import_name_from_21 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    assert( var_AlignFunctionDefinitions == NULL );
    var_AlignFunctionDefinitions = tmp_assign_source_21;

    tmp_import_globals_22 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_22 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_22,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 140;
    tmp_import_name_from_22 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_22, tmp_import_locals_22, const_tuple_str_plain_RemoveUnreachableCode_str_plain_GilCheck_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_22 );
    if ( tmp_import_name_from_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_22 = IMPORT_NAME( tmp_import_name_from_22, const_str_plain_RemoveUnreachableCode );
    Py_DECREF( tmp_import_name_from_22 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    assert( var_RemoveUnreachableCode == NULL );
    var_RemoveUnreachableCode = tmp_assign_source_22;

    tmp_import_globals_23 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_23 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_23,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 140;
    tmp_import_name_from_23 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_23, tmp_import_locals_23, const_tuple_str_plain_RemoveUnreachableCode_str_plain_GilCheck_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_23 );
    if ( tmp_import_name_from_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_23 = IMPORT_NAME( tmp_import_name_from_23, const_str_plain_GilCheck );
    Py_DECREF( tmp_import_name_from_23 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    assert( var_GilCheck == NULL );
    var_GilCheck = tmp_assign_source_23;

    tmp_import_globals_24 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_24 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_24,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 141;
    tmp_import_name_from_24 = IMPORT_MODULE( const_str_plain_FlowControl, tmp_import_globals_24, tmp_import_locals_24, const_tuple_str_plain_ControlFlowAnalysis_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_24 );
    if ( tmp_import_name_from_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_24 = IMPORT_NAME( tmp_import_name_from_24, const_str_plain_ControlFlowAnalysis );
    Py_DECREF( tmp_import_name_from_24 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    assert( var_ControlFlowAnalysis == NULL );
    var_ControlFlowAnalysis = tmp_assign_source_24;

    tmp_import_globals_25 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_25 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_25,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 142;
    tmp_import_name_from_25 = IMPORT_MODULE( const_str_plain_AnalysedTreeTransforms, tmp_import_globals_25, tmp_import_locals_25, const_tuple_str_plain_AutoTestDictTransform_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_25 );
    if ( tmp_import_name_from_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_25 = IMPORT_NAME( tmp_import_name_from_25, const_str_plain_AutoTestDictTransform );
    Py_DECREF( tmp_import_name_from_25 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    assert( var_AutoTestDictTransform == NULL );
    var_AutoTestDictTransform = tmp_assign_source_25;

    tmp_import_globals_26 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_26 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_26,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 143;
    tmp_import_name_from_26 = IMPORT_MODULE( const_str_plain_AutoDocTransforms, tmp_import_globals_26, tmp_import_locals_26, const_tuple_str_plain_EmbedSignature_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_26 );
    if ( tmp_import_name_from_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_26 = IMPORT_NAME( tmp_import_name_from_26, const_str_plain_EmbedSignature );
    Py_DECREF( tmp_import_name_from_26 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    assert( var_EmbedSignature == NULL );
    var_EmbedSignature = tmp_assign_source_26;

    tmp_import_globals_27 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_27 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_27,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 144;
    tmp_import_name_from_27 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_27, tmp_import_locals_27, const_tuple_7df8e177cf846adf18baa69176ef079c_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_27 );
    if ( tmp_import_name_from_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_27 = IMPORT_NAME( tmp_import_name_from_27, const_str_plain_FlattenInListTransform );
    Py_DECREF( tmp_import_name_from_27 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    assert( var_FlattenInListTransform == NULL );
    var_FlattenInListTransform = tmp_assign_source_27;

    tmp_import_globals_28 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_28 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_28,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 144;
    tmp_import_name_from_28 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_28, tmp_import_locals_28, const_tuple_7df8e177cf846adf18baa69176ef079c_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_28 );
    if ( tmp_import_name_from_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_28 = IMPORT_NAME( tmp_import_name_from_28, const_str_plain_SwitchTransform );
    Py_DECREF( tmp_import_name_from_28 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    assert( var_SwitchTransform == NULL );
    var_SwitchTransform = tmp_assign_source_28;

    tmp_import_globals_29 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_29 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_29,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 144;
    tmp_import_name_from_29 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_29, tmp_import_locals_29, const_tuple_7df8e177cf846adf18baa69176ef079c_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_29 );
    if ( tmp_import_name_from_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_29 = IMPORT_NAME( tmp_import_name_from_29, const_str_plain_IterationTransform );
    Py_DECREF( tmp_import_name_from_29 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    assert( var_IterationTransform == NULL );
    var_IterationTransform = tmp_assign_source_29;

    tmp_import_globals_30 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_30 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_30,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 145;
    tmp_import_name_from_30 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_30, tmp_import_locals_30, const_tuple_d4f91388866136538a2c25c048caa8ea_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_30 );
    if ( tmp_import_name_from_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_30 = IMPORT_NAME( tmp_import_name_from_30, const_str_plain_EarlyReplaceBuiltinCalls );
    Py_DECREF( tmp_import_name_from_30 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    assert( var_EarlyReplaceBuiltinCalls == NULL );
    var_EarlyReplaceBuiltinCalls = tmp_assign_source_30;

    tmp_import_globals_31 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_31 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_31,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 145;
    tmp_import_name_from_31 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_31, tmp_import_locals_31, const_tuple_d4f91388866136538a2c25c048caa8ea_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_31 );
    if ( tmp_import_name_from_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_31 = IMPORT_NAME( tmp_import_name_from_31, const_str_plain_OptimizeBuiltinCalls );
    Py_DECREF( tmp_import_name_from_31 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    assert( var_OptimizeBuiltinCalls == NULL );
    var_OptimizeBuiltinCalls = tmp_assign_source_31;

    tmp_import_globals_32 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_32 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_32,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 146;
    tmp_import_name_from_32 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_32, tmp_import_locals_32, const_tuple_str_plain_InlineDefNodeCalls_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_32 );
    if ( tmp_import_name_from_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_32 = IMPORT_NAME( tmp_import_name_from_32, const_str_plain_InlineDefNodeCalls );
    Py_DECREF( tmp_import_name_from_32 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    assert( var_InlineDefNodeCalls == NULL );
    var_InlineDefNodeCalls = tmp_assign_source_32;

    tmp_import_globals_33 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_33 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_33,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 147;
    tmp_import_name_from_33 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_33, tmp_import_locals_33, const_tuple_str_plain_ConstantFolding_str_plain_FinalOptimizePhase_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_33 );
    if ( tmp_import_name_from_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_33 = IMPORT_NAME( tmp_import_name_from_33, const_str_plain_ConstantFolding );
    Py_DECREF( tmp_import_name_from_33 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    assert( var_ConstantFolding == NULL );
    var_ConstantFolding = tmp_assign_source_33;

    tmp_import_globals_34 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_34 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_34,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 147;
    tmp_import_name_from_34 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_34, tmp_import_locals_34, const_tuple_str_plain_ConstantFolding_str_plain_FinalOptimizePhase_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_34 );
    if ( tmp_import_name_from_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_34 = IMPORT_NAME( tmp_import_name_from_34, const_str_plain_FinalOptimizePhase );
    Py_DECREF( tmp_import_name_from_34 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    assert( var_FinalOptimizePhase == NULL );
    var_FinalOptimizePhase = tmp_assign_source_34;

    tmp_import_globals_35 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_35 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_35,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 148;
    tmp_import_name_from_35 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_35, tmp_import_locals_35, const_tuple_str_plain_DropRefcountingTransform_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_35 );
    if ( tmp_import_name_from_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_35 = IMPORT_NAME( tmp_import_name_from_35, const_str_plain_DropRefcountingTransform );
    Py_DECREF( tmp_import_name_from_35 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 148;
        goto frame_exception_exit_1;
    }
    assert( var_DropRefcountingTransform == NULL );
    var_DropRefcountingTransform = tmp_assign_source_35;

    tmp_import_globals_36 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_36 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_36,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 149;
    tmp_import_name_from_36 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_36, tmp_import_locals_36, const_tuple_str_plain_ConsolidateOverflowCheck_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_36 );
    if ( tmp_import_name_from_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 149;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_36 = IMPORT_NAME( tmp_import_name_from_36, const_str_plain_ConsolidateOverflowCheck );
    Py_DECREF( tmp_import_name_from_36 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 149;
        goto frame_exception_exit_1;
    }
    assert( var_ConsolidateOverflowCheck == NULL );
    var_ConsolidateOverflowCheck = tmp_assign_source_36;

    tmp_import_globals_37 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_37 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_37,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 150;
    tmp_import_name_from_37 = IMPORT_MODULE( const_str_plain_Buffer, tmp_import_globals_37, tmp_import_locals_37, const_tuple_str_plain_IntroduceBufferAuxiliaryVars_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_37 );
    if ( tmp_import_name_from_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_37 = IMPORT_NAME( tmp_import_name_from_37, const_str_plain_IntroduceBufferAuxiliaryVars );
    Py_DECREF( tmp_import_name_from_37 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 150;
        goto frame_exception_exit_1;
    }
    assert( var_IntroduceBufferAuxiliaryVars == NULL );
    var_IntroduceBufferAuxiliaryVars = tmp_assign_source_37;

    tmp_import_globals_38 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_38 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_38,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 151;
    tmp_import_name_from_38 = IMPORT_MODULE( const_str_plain_ModuleNode, tmp_import_globals_38, tmp_import_locals_38, const_tuple_bee15a3a8e874089ab63d9db1be217b7_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_38 );
    if ( tmp_import_name_from_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 151;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_38 = IMPORT_NAME( tmp_import_name_from_38, const_str_plain_check_c_declarations );
    Py_DECREF( tmp_import_name_from_38 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 151;
        goto frame_exception_exit_1;
    }
    assert( var_check_c_declarations == NULL );
    var_check_c_declarations = tmp_assign_source_38;

    tmp_import_globals_39 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_39 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_mode,
            par_mode
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_NormalizeTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_NormalizeTree,
            var_NormalizeTree
        );

        assert( res == 0 );
    }

    if ( var_PostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_PostParse,
            var_PostParse
        );

        assert( res == 0 );
    }

    if ( var_PxdPostParse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_PxdPostParse,
            var_PxdPostParse
        );

        assert( res == 0 );
    }

    if ( var_ForwardDeclareTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_ForwardDeclareTypes,
            var_ForwardDeclareTypes
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseExpressionsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_AnalyseExpressionsTransform,
            var_AnalyseExpressionsTransform
        );

        assert( res == 0 );
    }

    if ( var_FindInvalidUseOfFusedTypes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_FindInvalidUseOfFusedTypes,
            var_FindInvalidUseOfFusedTypes
        );

        assert( res == 0 );
    }

    if ( var_CreateClosureClasses )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_CreateClosureClasses,
            var_CreateClosureClasses
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_DecoratorTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_DecoratorTransform,
            var_DecoratorTransform
        );

        assert( res == 0 );
    }

    if ( var_InterpretCompilerDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_InterpretCompilerDirectives,
            var_InterpretCompilerDirectives
        );

        assert( res == 0 );
    }

    if ( var_TransformBuiltinMethods )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_TransformBuiltinMethods,
            var_TransformBuiltinMethods
        );

        assert( res == 0 );
    }

    if ( var_ExpandInplaceOperators )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_ExpandInplaceOperators,
            var_ExpandInplaceOperators
        );

        assert( res == 0 );
    }

    if ( var_ParallelRangeTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_ParallelRangeTransform,
            var_ParallelRangeTransform
        );

        assert( res == 0 );
    }

    if ( var_CalculateQualifiedNamesTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_CalculateQualifiedNamesTransform,
            var_CalculateQualifiedNamesTransform
        );

        assert( res == 0 );
    }

    if ( var_MarkParallelAssignments )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_MarkParallelAssignments,
            var_MarkParallelAssignments
        );

        assert( res == 0 );
    }

    if ( var_MarkOverflowingArithmetic )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_MarkOverflowingArithmetic,
            var_MarkOverflowingArithmetic
        );

        assert( res == 0 );
    }

    if ( var_AdjustDefByDirectives )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_AdjustDefByDirectives,
            var_AdjustDefByDirectives
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_RemoveUnreachableCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_RemoveUnreachableCode,
            var_RemoveUnreachableCode
        );

        assert( res == 0 );
    }

    if ( var_GilCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_GilCheck,
            var_GilCheck
        );

        assert( res == 0 );
    }

    if ( var_ControlFlowAnalysis )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_ControlFlowAnalysis,
            var_ControlFlowAnalysis
        );

        assert( res == 0 );
    }

    if ( var_AutoTestDictTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_AutoTestDictTransform,
            var_AutoTestDictTransform
        );

        assert( res == 0 );
    }

    if ( var_EmbedSignature )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_EmbedSignature,
            var_EmbedSignature
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_SwitchTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_SwitchTransform,
            var_SwitchTransform
        );

        assert( res == 0 );
    }

    if ( var_IterationTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_IterationTransform,
            var_IterationTransform
        );

        assert( res == 0 );
    }

    if ( var_EarlyReplaceBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_EarlyReplaceBuiltinCalls,
            var_EarlyReplaceBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_OptimizeBuiltinCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_OptimizeBuiltinCalls,
            var_OptimizeBuiltinCalls
        );

        assert( res == 0 );
    }

    if ( var_InlineDefNodeCalls )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_InlineDefNodeCalls,
            var_InlineDefNodeCalls
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FinalOptimizePhase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_FinalOptimizePhase,
            var_FinalOptimizePhase
        );

        assert( res == 0 );
    }

    if ( var_DropRefcountingTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_DropRefcountingTransform,
            var_DropRefcountingTransform
        );

        assert( res == 0 );
    }

    if ( var_ConsolidateOverflowCheck )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_ConsolidateOverflowCheck,
            var_ConsolidateOverflowCheck
        );

        assert( res == 0 );
    }

    if ( var_IntroduceBufferAuxiliaryVars )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_IntroduceBufferAuxiliaryVars,
            var_IntroduceBufferAuxiliaryVars
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_check_c_declarations,
            var_check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var_check_c_declarations_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_check_c_declarations_pxd,
            var_check_c_declarations_pxd
        );

        assert( res == 0 );
    }

    if ( var__check_c_declarations )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain__check_c_declarations,
            var__check_c_declarations
        );

        assert( res == 0 );
    }

    if ( var__specific_post_parse )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain__specific_post_parse,
            var__specific_post_parse
        );

        assert( res == 0 );
    }

    if ( var__align_function_definitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain__align_function_definitions,
            var__align_function_definitions
        );

        assert( res == 0 );
    }

    if ( var_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_stages,
            var_stages
        );

        assert( res == 0 );
    }

    if ( var_filtered_stages )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_filtered_stages,
            var_filtered_stages
        );

        assert( res == 0 );
    }

    if ( var_s )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_39,
            const_str_plain_s,
            var_s
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 151;
    tmp_import_name_from_39 = IMPORT_MODULE( const_str_plain_ModuleNode, tmp_import_globals_39, tmp_import_locals_39, const_tuple_bee15a3a8e874089ab63d9db1be217b7_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_39 );
    if ( tmp_import_name_from_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 151;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_39 = IMPORT_NAME( tmp_import_name_from_39, const_str_plain_check_c_declarations_pxd );
    Py_DECREF( tmp_import_name_from_39 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 151;
        goto frame_exception_exit_1;
    }
    assert( var_check_c_declarations_pxd == NULL );
    var_check_c_declarations_pxd = tmp_assign_source_39;

    tmp_compare_left_2 = par_mode;

    tmp_compare_right_2 = const_str_plain_pxd;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_40 = var_check_c_declarations_pxd;

    if ( tmp_assign_source_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "check_c_declarations_pxd" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 155;
        goto frame_exception_exit_1;
    }

    assert( var__check_c_declarations == NULL );
    Py_INCREF( tmp_assign_source_40 );
    var__check_c_declarations = tmp_assign_source_40;

    tmp_called_name_1 = var_PxdPostParse;

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "PxdPostParse" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 156;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_context;

    frame_function->f_lineno = 156;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_41 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    assert( var__specific_post_parse == NULL );
    var__specific_post_parse = tmp_assign_source_41;

    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_42 = var_check_c_declarations;

    if ( tmp_assign_source_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "check_c_declarations" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }

    assert( var__check_c_declarations == NULL );
    Py_INCREF( tmp_assign_source_42 );
    var__check_c_declarations = tmp_assign_source_42;

    tmp_assign_source_43 = Py_None;
    assert( var__specific_post_parse == NULL );
    Py_INCREF( tmp_assign_source_43 );
    var__specific_post_parse = tmp_assign_source_43;

    branch_end_2:;
    tmp_compare_left_3 = par_mode;

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "mode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_3 = const_str_plain_py;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_2 = var_AlignFunctionDefinitions;

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AlignFunctionDefinitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_context;

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 162;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    assert( var__align_function_definitions == NULL );
    var__align_function_definitions = tmp_assign_source_44;

    goto branch_end_3;
    branch_no_3:;
    tmp_assign_source_45 = Py_None;
    assert( var__align_function_definitions == NULL );
    Py_INCREF( tmp_assign_source_45 );
    var__align_function_definitions = tmp_assign_source_45;

    branch_end_3:;
    tmp_assign_source_46 = PyList_New( 39 );
    tmp_called_name_3 = var_NormalizeTree;

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "NormalizeTree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_context;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 170;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 170;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 0, tmp_list_element_1 );
    tmp_called_name_4 = var_PostParse;

    if ( tmp_called_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "PostParse" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 171;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_context;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 171;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 171;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 171;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 1, tmp_list_element_1 );
    tmp_list_element_1 = var__specific_post_parse;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "_specific_post_parse" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 172;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_46, 2, tmp_list_element_1 );
    tmp_called_name_5 = var_InterpretCompilerDirectives;

    if ( tmp_called_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "InterpretCompilerDirectives" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_context;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_context;

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_compiler_directives );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 173;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 3, tmp_list_element_1 );
    tmp_called_name_6 = var_ParallelRangeTransform;

    if ( tmp_called_name_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ParallelRangeTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_context;

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 174;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 4, tmp_list_element_1 );
    tmp_called_name_7 = var_AdjustDefByDirectives;

    if ( tmp_called_name_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AdjustDefByDirectives" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 175;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = par_context;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 175;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 175;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 175;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 5, tmp_list_element_1 );
    tmp_called_name_8 = var_WithTransform;

    if ( tmp_called_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "WithTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 176;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_9 = par_context;

    if ( tmp_args_element_name_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 176;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 176;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 176;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 6, tmp_list_element_1 );
    tmp_called_name_9 = var_MarkClosureVisitor;

    if ( tmp_called_name_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "MarkClosureVisitor" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_10 = par_context;

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 177;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 7, tmp_list_element_1 );
    tmp_list_element_1 = var__align_function_definitions;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "_align_function_definitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 178;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_46, 8, tmp_list_element_1 );
    tmp_called_name_10 = var_RemoveUnreachableCode;

    if ( tmp_called_name_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "RemoveUnreachableCode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_11 = par_context;

    if ( tmp_args_element_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 179;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 9, tmp_list_element_1 );
    tmp_called_name_11 = var_ConstantFolding;

    if ( tmp_called_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ConstantFolding" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 180;
    tmp_list_element_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 10, tmp_list_element_1 );
    tmp_called_name_12 = var_FlattenInListTransform;

    if ( tmp_called_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "FlattenInListTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 181;
    tmp_list_element_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_12 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 11, tmp_list_element_1 );
    tmp_called_name_13 = var_DecoratorTransform;

    if ( tmp_called_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "DecoratorTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_12 = par_context;

    if ( tmp_args_element_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 182;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 12, tmp_list_element_1 );
    tmp_called_name_14 = var_ForwardDeclareTypes;

    if ( tmp_called_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ForwardDeclareTypes" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 183;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_13 = par_context;

    if ( tmp_args_element_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 183;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 183;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 183;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 13, tmp_list_element_1 );
    tmp_called_name_15 = var_AnalyseDeclarationsTransform;

    if ( tmp_called_name_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AnalyseDeclarationsTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 184;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_14 = par_context;

    if ( tmp_args_element_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 184;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 184;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 184;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 14, tmp_list_element_1 );
    tmp_called_name_16 = var_AutoTestDictTransform;

    if ( tmp_called_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AutoTestDictTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 185;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_15 = par_context;

    if ( tmp_args_element_name_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 185;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 185;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 185;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 15, tmp_list_element_1 );
    tmp_called_name_17 = var_EmbedSignature;

    if ( tmp_called_name_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "EmbedSignature" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_16 = par_context;

    if ( tmp_args_element_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 186;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 16, tmp_list_element_1 );
    tmp_called_name_18 = var_EarlyReplaceBuiltinCalls;

    if ( tmp_called_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "EarlyReplaceBuiltinCalls" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_17 = par_context;

    if ( tmp_args_element_name_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 187;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 17, tmp_list_element_1 );
    tmp_called_name_19 = var_TransformBuiltinMethods;

    if ( tmp_called_name_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "TransformBuiltinMethods" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 188;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_18 = par_context;

    if ( tmp_args_element_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 188;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 188;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 188;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 18, tmp_list_element_1 );
    tmp_called_name_20 = var_MarkParallelAssignments;

    if ( tmp_called_name_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "MarkParallelAssignments" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_19 = par_context;

    if ( tmp_args_element_name_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 189;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 19, tmp_list_element_1 );
    tmp_called_name_21 = var_ControlFlowAnalysis;

    if ( tmp_called_name_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ControlFlowAnalysis" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 190;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_20 = par_context;

    if ( tmp_args_element_name_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 190;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 190;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 190;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 20, tmp_list_element_1 );
    tmp_called_name_22 = var_RemoveUnreachableCode;

    if ( tmp_called_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "RemoveUnreachableCode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 191;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_21 = par_context;

    if ( tmp_args_element_name_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 191;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 191;
    {
        PyObject *call_args[] = { tmp_args_element_name_21 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_22, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 191;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 21, tmp_list_element_1 );
    tmp_called_name_23 = var_MarkOverflowingArithmetic;

    if ( tmp_called_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "MarkOverflowingArithmetic" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 193;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_22 = par_context;

    if ( tmp_args_element_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 193;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 193;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 22, tmp_list_element_1 );
    tmp_called_name_24 = var_IntroduceBufferAuxiliaryVars;

    if ( tmp_called_name_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "IntroduceBufferAuxiliaryVars" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_23 = par_context;

    if ( tmp_args_element_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 194;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 23, tmp_list_element_1 );
    tmp_list_element_1 = var__check_c_declarations;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "_check_c_declarations" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 195;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_46, 24, tmp_list_element_1 );
    tmp_called_name_25 = var_InlineDefNodeCalls;

    if ( tmp_called_name_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "InlineDefNodeCalls" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 196;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_24 = par_context;

    if ( tmp_args_element_name_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 196;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 196;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 196;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 25, tmp_list_element_1 );
    tmp_called_name_26 = var_AnalyseExpressionsTransform;

    if ( tmp_called_name_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AnalyseExpressionsTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 197;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_25 = par_context;

    if ( tmp_args_element_name_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 197;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 197;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_26, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 197;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 26, tmp_list_element_1 );
    tmp_called_name_27 = var_FindInvalidUseOfFusedTypes;

    if ( tmp_called_name_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "FindInvalidUseOfFusedTypes" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 198;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_26 = par_context;

    if ( tmp_args_element_name_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 198;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 198;
    {
        PyObject *call_args[] = { tmp_args_element_name_26 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 198;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 27, tmp_list_element_1 );
    tmp_called_name_28 = var_ExpandInplaceOperators;

    if ( tmp_called_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ExpandInplaceOperators" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 199;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_27 = par_context;

    if ( tmp_args_element_name_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 199;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 199;
    {
        PyObject *call_args[] = { tmp_args_element_name_27 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 199;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 28, tmp_list_element_1 );
    tmp_called_name_29 = var_IterationTransform;

    if ( tmp_called_name_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "IterationTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_28 = par_context;

    if ( tmp_args_element_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 200;
    {
        PyObject *call_args[] = { tmp_args_element_name_28 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 29, tmp_list_element_1 );
    tmp_called_name_30 = var_SwitchTransform;

    if ( tmp_called_name_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "SwitchTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 201;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_29 = par_context;

    if ( tmp_args_element_name_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 201;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 201;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 201;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 30, tmp_list_element_1 );
    tmp_called_name_31 = var_OptimizeBuiltinCalls;

    if ( tmp_called_name_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "OptimizeBuiltinCalls" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 202;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_30 = par_context;

    if ( tmp_args_element_name_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 202;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 202;
    {
        PyObject *call_args[] = { tmp_args_element_name_30 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_31, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 202;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 31, tmp_list_element_1 );
    tmp_called_name_32 = var_CreateClosureClasses;

    if ( tmp_called_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "CreateClosureClasses" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 203;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_31 = par_context;

    if ( tmp_args_element_name_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 203;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 203;
    {
        PyObject *call_args[] = { tmp_args_element_name_31 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 203;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 32, tmp_list_element_1 );
    tmp_called_name_33 = var_CalculateQualifiedNamesTransform;

    if ( tmp_called_name_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "CalculateQualifiedNamesTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 204;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_32 = par_context;

    if ( tmp_args_element_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 204;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 204;
    {
        PyObject *call_args[] = { tmp_args_element_name_32 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_33, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 204;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 33, tmp_list_element_1 );
    tmp_called_name_34 = var_ConsolidateOverflowCheck;

    if ( tmp_called_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ConsolidateOverflowCheck" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_33 = par_context;

    if ( tmp_args_element_name_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 205;
    {
        PyObject *call_args[] = { tmp_args_element_name_33 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_34, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 34, tmp_list_element_1 );
    tmp_called_name_35 = var_DropRefcountingTransform;

    if ( tmp_called_name_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "DropRefcountingTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 206;
    tmp_list_element_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_35 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 35, tmp_list_element_1 );
    tmp_called_name_36 = var_FinalOptimizePhase;

    if ( tmp_called_name_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "FinalOptimizePhase" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 207;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_34 = par_context;

    if ( tmp_args_element_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 207;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 207;
    {
        PyObject *call_args[] = { tmp_args_element_name_34 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_36, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 207;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 36, tmp_list_element_1 );
    tmp_called_name_37 = var_GilCheck;

    if ( tmp_called_name_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "GilCheck" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 208;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 208;
    tmp_list_element_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_37 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 208;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 37, tmp_list_element_1 );
    tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_UseUtilityCodeDefinitions );

    if (unlikely( tmp_called_name_38 == NULL ))
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_UseUtilityCodeDefinitions );
    }

    if ( tmp_called_name_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "UseUtilityCodeDefinitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 209;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_35 = par_context;

    if ( tmp_args_element_name_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 209;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 209;
    {
        PyObject *call_args[] = { tmp_args_element_name_35 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_38, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        exception_lineno = 209;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_46, 38, tmp_list_element_1 );
    assert( var_stages == NULL );
    var_stages = tmp_assign_source_46;

    tmp_assign_source_47 = PyList_New( 0 );
    assert( var_filtered_stages == NULL );
    var_filtered_stages = tmp_assign_source_47;

    tmp_iter_arg_1 = var_stages;

    tmp_assign_source_48 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 212;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_48;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_49 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_49 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 212;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    tmp_assign_source_50 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_s;
        var_s = tmp_assign_source_50;
        Py_INCREF( var_s );
        Py_XDECREF( old );
    }

    tmp_source_name_2 = var_s;

    tmp_compare_left_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 213;
        goto try_except_handler_2;
    }
    tmp_compare_right_4 = par_exclude_classes;

    tmp_cmp_NotIn_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_NotIn_2 == -1) );
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_NotIn_2 == 0 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_3 = var_filtered_stages;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filtered_stages" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 214;
        goto try_except_handler_2;
    }

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_append );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 214;
        goto try_except_handler_2;
    }
    tmp_args_element_name_36 = var_s;

    if ( tmp_args_element_name_36 == NULL )
    {
        Py_DECREF( tmp_called_name_39 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "s" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 214;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 214;
    {
        PyObject *call_args[] = { tmp_args_element_name_36 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_39, call_args );
    }

    Py_DECREF( tmp_called_name_39 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 214;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 212;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = var_filtered_stages;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filtered_stages" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_context )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    par_context
                );

                assert( res == 0 );
            }

            if ( par_mode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_mode,
                    par_mode
                );

                assert( res == 0 );
            }

            if ( par_exclude_classes )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_exclude_classes,
                    par_exclude_classes
                );

                assert( res == 0 );
            }

            if ( var_PrintTree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_PrintTree,
                    var_PrintTree
                );

                assert( res == 0 );
            }

            if ( var_WithTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_WithTransform,
                    var_WithTransform
                );

                assert( res == 0 );
            }

            if ( var_NormalizeTree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_NormalizeTree,
                    var_NormalizeTree
                );

                assert( res == 0 );
            }

            if ( var_PostParse )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_PostParse,
                    var_PostParse
                );

                assert( res == 0 );
            }

            if ( var_PxdPostParse )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_PxdPostParse,
                    var_PxdPostParse
                );

                assert( res == 0 );
            }

            if ( var_ForwardDeclareTypes )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ForwardDeclareTypes,
                    var_ForwardDeclareTypes
                );

                assert( res == 0 );
            }

            if ( var_AnalyseDeclarationsTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AnalyseDeclarationsTransform,
                    var_AnalyseDeclarationsTransform
                );

                assert( res == 0 );
            }

            if ( var_AnalyseExpressionsTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AnalyseExpressionsTransform,
                    var_AnalyseExpressionsTransform
                );

                assert( res == 0 );
            }

            if ( var_FindInvalidUseOfFusedTypes )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_FindInvalidUseOfFusedTypes,
                    var_FindInvalidUseOfFusedTypes
                );

                assert( res == 0 );
            }

            if ( var_CreateClosureClasses )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_CreateClosureClasses,
                    var_CreateClosureClasses
                );

                assert( res == 0 );
            }

            if ( var_MarkClosureVisitor )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_MarkClosureVisitor,
                    var_MarkClosureVisitor
                );

                assert( res == 0 );
            }

            if ( var_DecoratorTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_DecoratorTransform,
                    var_DecoratorTransform
                );

                assert( res == 0 );
            }

            if ( var_InterpretCompilerDirectives )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_InterpretCompilerDirectives,
                    var_InterpretCompilerDirectives
                );

                assert( res == 0 );
            }

            if ( var_TransformBuiltinMethods )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_TransformBuiltinMethods,
                    var_TransformBuiltinMethods
                );

                assert( res == 0 );
            }

            if ( var_ExpandInplaceOperators )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ExpandInplaceOperators,
                    var_ExpandInplaceOperators
                );

                assert( res == 0 );
            }

            if ( var_ParallelRangeTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ParallelRangeTransform,
                    var_ParallelRangeTransform
                );

                assert( res == 0 );
            }

            if ( var_CalculateQualifiedNamesTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_CalculateQualifiedNamesTransform,
                    var_CalculateQualifiedNamesTransform
                );

                assert( res == 0 );
            }

            if ( var_MarkParallelAssignments )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_MarkParallelAssignments,
                    var_MarkParallelAssignments
                );

                assert( res == 0 );
            }

            if ( var_MarkOverflowingArithmetic )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_MarkOverflowingArithmetic,
                    var_MarkOverflowingArithmetic
                );

                assert( res == 0 );
            }

            if ( var_AdjustDefByDirectives )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AdjustDefByDirectives,
                    var_AdjustDefByDirectives
                );

                assert( res == 0 );
            }

            if ( var_AlignFunctionDefinitions )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AlignFunctionDefinitions,
                    var_AlignFunctionDefinitions
                );

                assert( res == 0 );
            }

            if ( var_RemoveUnreachableCode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_RemoveUnreachableCode,
                    var_RemoveUnreachableCode
                );

                assert( res == 0 );
            }

            if ( var_GilCheck )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_GilCheck,
                    var_GilCheck
                );

                assert( res == 0 );
            }

            if ( var_ControlFlowAnalysis )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ControlFlowAnalysis,
                    var_ControlFlowAnalysis
                );

                assert( res == 0 );
            }

            if ( var_AutoTestDictTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AutoTestDictTransform,
                    var_AutoTestDictTransform
                );

                assert( res == 0 );
            }

            if ( var_EmbedSignature )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_EmbedSignature,
                    var_EmbedSignature
                );

                assert( res == 0 );
            }

            if ( var_FlattenInListTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_FlattenInListTransform,
                    var_FlattenInListTransform
                );

                assert( res == 0 );
            }

            if ( var_SwitchTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_SwitchTransform,
                    var_SwitchTransform
                );

                assert( res == 0 );
            }

            if ( var_IterationTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_IterationTransform,
                    var_IterationTransform
                );

                assert( res == 0 );
            }

            if ( var_EarlyReplaceBuiltinCalls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_EarlyReplaceBuiltinCalls,
                    var_EarlyReplaceBuiltinCalls
                );

                assert( res == 0 );
            }

            if ( var_OptimizeBuiltinCalls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_OptimizeBuiltinCalls,
                    var_OptimizeBuiltinCalls
                );

                assert( res == 0 );
            }

            if ( var_InlineDefNodeCalls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_InlineDefNodeCalls,
                    var_InlineDefNodeCalls
                );

                assert( res == 0 );
            }

            if ( var_ConstantFolding )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ConstantFolding,
                    var_ConstantFolding
                );

                assert( res == 0 );
            }

            if ( var_FinalOptimizePhase )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_FinalOptimizePhase,
                    var_FinalOptimizePhase
                );

                assert( res == 0 );
            }

            if ( var_DropRefcountingTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_DropRefcountingTransform,
                    var_DropRefcountingTransform
                );

                assert( res == 0 );
            }

            if ( var_ConsolidateOverflowCheck )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ConsolidateOverflowCheck,
                    var_ConsolidateOverflowCheck
                );

                assert( res == 0 );
            }

            if ( var_IntroduceBufferAuxiliaryVars )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_IntroduceBufferAuxiliaryVars,
                    var_IntroduceBufferAuxiliaryVars
                );

                assert( res == 0 );
            }

            if ( var_check_c_declarations )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_check_c_declarations,
                    var_check_c_declarations
                );

                assert( res == 0 );
            }

            if ( var_check_c_declarations_pxd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_check_c_declarations_pxd,
                    var_check_c_declarations_pxd
                );

                assert( res == 0 );
            }

            if ( var__check_c_declarations )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain__check_c_declarations,
                    var__check_c_declarations
                );

                assert( res == 0 );
            }

            if ( var__specific_post_parse )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain__specific_post_parse,
                    var__specific_post_parse
                );

                assert( res == 0 );
            }

            if ( var__align_function_definitions )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain__align_function_definitions,
                    var__align_function_definitions
                );

                assert( res == 0 );
            }

            if ( var_stages )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_stages,
                    var_stages
                );

                assert( res == 0 );
            }

            if ( var_filtered_stages )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_filtered_stages,
                    var_filtered_stages
                );

                assert( res == 0 );
            }

            if ( var_s )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_s,
                    var_s
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_9_create_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_mode );
    par_mode = NULL;

    CHECK_OBJECT( (PyObject *)par_exclude_classes );
    Py_DECREF( par_exclude_classes );
    par_exclude_classes = NULL;

    Py_XDECREF( var_PrintTree );
    var_PrintTree = NULL;

    Py_XDECREF( var_WithTransform );
    var_WithTransform = NULL;

    Py_XDECREF( var_NormalizeTree );
    var_NormalizeTree = NULL;

    Py_XDECREF( var_PostParse );
    var_PostParse = NULL;

    Py_XDECREF( var_PxdPostParse );
    var_PxdPostParse = NULL;

    Py_XDECREF( var_ForwardDeclareTypes );
    var_ForwardDeclareTypes = NULL;

    Py_XDECREF( var_AnalyseDeclarationsTransform );
    var_AnalyseDeclarationsTransform = NULL;

    Py_XDECREF( var_AnalyseExpressionsTransform );
    var_AnalyseExpressionsTransform = NULL;

    Py_XDECREF( var_FindInvalidUseOfFusedTypes );
    var_FindInvalidUseOfFusedTypes = NULL;

    Py_XDECREF( var_CreateClosureClasses );
    var_CreateClosureClasses = NULL;

    Py_XDECREF( var_MarkClosureVisitor );
    var_MarkClosureVisitor = NULL;

    Py_XDECREF( var_DecoratorTransform );
    var_DecoratorTransform = NULL;

    Py_XDECREF( var_InterpretCompilerDirectives );
    var_InterpretCompilerDirectives = NULL;

    Py_XDECREF( var_TransformBuiltinMethods );
    var_TransformBuiltinMethods = NULL;

    Py_XDECREF( var_ExpandInplaceOperators );
    var_ExpandInplaceOperators = NULL;

    Py_XDECREF( var_ParallelRangeTransform );
    var_ParallelRangeTransform = NULL;

    Py_XDECREF( var_CalculateQualifiedNamesTransform );
    var_CalculateQualifiedNamesTransform = NULL;

    Py_XDECREF( var_MarkParallelAssignments );
    var_MarkParallelAssignments = NULL;

    Py_XDECREF( var_MarkOverflowingArithmetic );
    var_MarkOverflowingArithmetic = NULL;

    Py_XDECREF( var_AdjustDefByDirectives );
    var_AdjustDefByDirectives = NULL;

    Py_XDECREF( var_AlignFunctionDefinitions );
    var_AlignFunctionDefinitions = NULL;

    Py_XDECREF( var_RemoveUnreachableCode );
    var_RemoveUnreachableCode = NULL;

    Py_XDECREF( var_GilCheck );
    var_GilCheck = NULL;

    Py_XDECREF( var_ControlFlowAnalysis );
    var_ControlFlowAnalysis = NULL;

    Py_XDECREF( var_AutoTestDictTransform );
    var_AutoTestDictTransform = NULL;

    Py_XDECREF( var_EmbedSignature );
    var_EmbedSignature = NULL;

    Py_XDECREF( var_FlattenInListTransform );
    var_FlattenInListTransform = NULL;

    Py_XDECREF( var_SwitchTransform );
    var_SwitchTransform = NULL;

    Py_XDECREF( var_IterationTransform );
    var_IterationTransform = NULL;

    Py_XDECREF( var_EarlyReplaceBuiltinCalls );
    var_EarlyReplaceBuiltinCalls = NULL;

    Py_XDECREF( var_OptimizeBuiltinCalls );
    var_OptimizeBuiltinCalls = NULL;

    Py_XDECREF( var_InlineDefNodeCalls );
    var_InlineDefNodeCalls = NULL;

    Py_XDECREF( var_ConstantFolding );
    var_ConstantFolding = NULL;

    Py_XDECREF( var_FinalOptimizePhase );
    var_FinalOptimizePhase = NULL;

    Py_XDECREF( var_DropRefcountingTransform );
    var_DropRefcountingTransform = NULL;

    Py_XDECREF( var_ConsolidateOverflowCheck );
    var_ConsolidateOverflowCheck = NULL;

    Py_XDECREF( var_IntroduceBufferAuxiliaryVars );
    var_IntroduceBufferAuxiliaryVars = NULL;

    Py_XDECREF( var_check_c_declarations );
    var_check_c_declarations = NULL;

    Py_XDECREF( var_check_c_declarations_pxd );
    var_check_c_declarations_pxd = NULL;

    Py_XDECREF( var__check_c_declarations );
    var__check_c_declarations = NULL;

    Py_XDECREF( var__specific_post_parse );
    var__specific_post_parse = NULL;

    Py_XDECREF( var__align_function_definitions );
    var__align_function_definitions = NULL;

    Py_XDECREF( var_stages );
    var_stages = NULL;

    Py_XDECREF( var_filtered_stages );
    var_filtered_stages = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_mode );
    par_mode = NULL;

    Py_XDECREF( par_exclude_classes );
    par_exclude_classes = NULL;

    Py_XDECREF( var_PrintTree );
    var_PrintTree = NULL;

    Py_XDECREF( var_WithTransform );
    var_WithTransform = NULL;

    Py_XDECREF( var_NormalizeTree );
    var_NormalizeTree = NULL;

    Py_XDECREF( var_PostParse );
    var_PostParse = NULL;

    Py_XDECREF( var_PxdPostParse );
    var_PxdPostParse = NULL;

    Py_XDECREF( var_ForwardDeclareTypes );
    var_ForwardDeclareTypes = NULL;

    Py_XDECREF( var_AnalyseDeclarationsTransform );
    var_AnalyseDeclarationsTransform = NULL;

    Py_XDECREF( var_AnalyseExpressionsTransform );
    var_AnalyseExpressionsTransform = NULL;

    Py_XDECREF( var_FindInvalidUseOfFusedTypes );
    var_FindInvalidUseOfFusedTypes = NULL;

    Py_XDECREF( var_CreateClosureClasses );
    var_CreateClosureClasses = NULL;

    Py_XDECREF( var_MarkClosureVisitor );
    var_MarkClosureVisitor = NULL;

    Py_XDECREF( var_DecoratorTransform );
    var_DecoratorTransform = NULL;

    Py_XDECREF( var_InterpretCompilerDirectives );
    var_InterpretCompilerDirectives = NULL;

    Py_XDECREF( var_TransformBuiltinMethods );
    var_TransformBuiltinMethods = NULL;

    Py_XDECREF( var_ExpandInplaceOperators );
    var_ExpandInplaceOperators = NULL;

    Py_XDECREF( var_ParallelRangeTransform );
    var_ParallelRangeTransform = NULL;

    Py_XDECREF( var_CalculateQualifiedNamesTransform );
    var_CalculateQualifiedNamesTransform = NULL;

    Py_XDECREF( var_MarkParallelAssignments );
    var_MarkParallelAssignments = NULL;

    Py_XDECREF( var_MarkOverflowingArithmetic );
    var_MarkOverflowingArithmetic = NULL;

    Py_XDECREF( var_AdjustDefByDirectives );
    var_AdjustDefByDirectives = NULL;

    Py_XDECREF( var_AlignFunctionDefinitions );
    var_AlignFunctionDefinitions = NULL;

    Py_XDECREF( var_RemoveUnreachableCode );
    var_RemoveUnreachableCode = NULL;

    Py_XDECREF( var_GilCheck );
    var_GilCheck = NULL;

    Py_XDECREF( var_ControlFlowAnalysis );
    var_ControlFlowAnalysis = NULL;

    Py_XDECREF( var_AutoTestDictTransform );
    var_AutoTestDictTransform = NULL;

    Py_XDECREF( var_EmbedSignature );
    var_EmbedSignature = NULL;

    Py_XDECREF( var_FlattenInListTransform );
    var_FlattenInListTransform = NULL;

    Py_XDECREF( var_SwitchTransform );
    var_SwitchTransform = NULL;

    Py_XDECREF( var_IterationTransform );
    var_IterationTransform = NULL;

    Py_XDECREF( var_EarlyReplaceBuiltinCalls );
    var_EarlyReplaceBuiltinCalls = NULL;

    Py_XDECREF( var_OptimizeBuiltinCalls );
    var_OptimizeBuiltinCalls = NULL;

    Py_XDECREF( var_InlineDefNodeCalls );
    var_InlineDefNodeCalls = NULL;

    Py_XDECREF( var_ConstantFolding );
    var_ConstantFolding = NULL;

    Py_XDECREF( var_FinalOptimizePhase );
    var_FinalOptimizePhase = NULL;

    Py_XDECREF( var_DropRefcountingTransform );
    var_DropRefcountingTransform = NULL;

    Py_XDECREF( var_ConsolidateOverflowCheck );
    var_ConsolidateOverflowCheck = NULL;

    Py_XDECREF( var_IntroduceBufferAuxiliaryVars );
    var_IntroduceBufferAuxiliaryVars = NULL;

    Py_XDECREF( var_check_c_declarations );
    var_check_c_declarations = NULL;

    Py_XDECREF( var_check_c_declarations_pxd );
    var_check_c_declarations_pxd = NULL;

    Py_XDECREF( var__check_c_declarations );
    var__check_c_declarations = NULL;

    Py_XDECREF( var__specific_post_parse );
    var__specific_post_parse = NULL;

    Py_XDECREF( var__align_function_definitions );
    var__align_function_definitions = NULL;

    Py_XDECREF( var_stages );
    var_stages = NULL;

    Py_XDECREF( var_filtered_stages );
    var_filtered_stages = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_9_create_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_context = python_pars[ 0 ];
    PyObject *par_options = python_pars[ 1 ];
    PyObject *par_result = python_pars[ 2 ];
    PyObject *par_py = python_pars[ 3 ];
    PyObject *par_exclude_classes = python_pars[ 4 ];
    PyObject *var_mode = NULL;
    PyObject *var_test_support = NULL;
    PyObject *var_TreeAssertVisitor = NULL;
    PyObject *var_DebugWriter = NULL;
    PyObject *var_DebugTransform = NULL;
    PyObject *var_debug_transform = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_226f06ad5974da6f07e4f967569543cc, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_cond_value_1 = par_py;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_1 = const_str_plain_py;
    assert( var_mode == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_mode = tmp_assign_source_1;

    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_2 = const_str_plain_pyx;
    assert( var_mode == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_mode = tmp_assign_source_2;

    branch_end_1:;
    tmp_assign_source_3 = PyList_New( 0 );
    assert( var_test_support == NULL );
    var_test_support = tmp_assign_source_3;

    tmp_source_name_1 = par_options;

    tmp_cond_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_evaluate_tree_assertions );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 223;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_import_globals_1 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_options )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_options,
            par_options
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( par_py )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_py,
            par_py
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_mode,
            var_mode
        );

        assert( res == 0 );
    }

    if ( var_test_support )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_test_support,
            var_test_support
        );

        assert( res == 0 );
    }

    if ( var_TreeAssertVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_TreeAssertVisitor,
            var_TreeAssertVisitor
        );

        assert( res == 0 );
    }

    if ( var_DebugWriter )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_DebugWriter,
            var_DebugWriter
        );

        assert( res == 0 );
    }

    if ( var_DebugTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_DebugTransform,
            var_DebugTransform
        );

        assert( res == 0 );
    }

    if ( var_debug_transform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_debug_transform,
            var_debug_transform
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 224;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_TestUtils, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_TreeAssertVisitor_tuple, const_int_pos_2 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_TreeAssertVisitor );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    assert( var_TreeAssertVisitor == NULL );
    var_TreeAssertVisitor = tmp_assign_source_4;

    tmp_source_name_2 = var_test_support;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "test_support" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 225;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = var_TreeAssertVisitor;

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "TreeAssertVisitor" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 225;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 225;
    tmp_args_element_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 225;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 225;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    tmp_source_name_3 = par_options;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 227;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_gdb_debug );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 227;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 227;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_import_globals_2 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_options )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_options,
            par_options
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( par_py )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_py,
            par_py
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_mode,
            var_mode
        );

        assert( res == 0 );
    }

    if ( var_test_support )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_test_support,
            var_test_support
        );

        assert( res == 0 );
    }

    if ( var_TreeAssertVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_TreeAssertVisitor,
            var_TreeAssertVisitor
        );

        assert( res == 0 );
    }

    if ( var_DebugWriter )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_DebugWriter,
            var_DebugWriter
        );

        assert( res == 0 );
    }

    if ( var_DebugTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_DebugTransform,
            var_DebugTransform
        );

        assert( res == 0 );
    }

    if ( var_debug_transform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_debug_transform,
            var_debug_transform
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 228;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain_Debugger, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_DebugWriter_tuple, const_int_pos_2 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_DebugWriter );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    assert( var_DebugWriter == NULL );
    var_DebugWriter = tmp_assign_source_5;

    tmp_import_globals_3 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_options )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_options,
            par_options
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( par_py )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_py,
            par_py
        );

        assert( res == 0 );
    }

    if ( par_exclude_classes )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_exclude_classes,
            par_exclude_classes
        );

        assert( res == 0 );
    }

    if ( var_mode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_mode,
            var_mode
        );

        assert( res == 0 );
    }

    if ( var_test_support )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_test_support,
            var_test_support
        );

        assert( res == 0 );
    }

    if ( var_TreeAssertVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_TreeAssertVisitor,
            var_TreeAssertVisitor
        );

        assert( res == 0 );
    }

    if ( var_DebugWriter )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_DebugWriter,
            var_DebugWriter
        );

        assert( res == 0 );
    }

    if ( var_DebugTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_DebugTransform,
            var_DebugTransform
        );

        assert( res == 0 );
    }

    if ( var_debug_transform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_debug_transform,
            var_debug_transform
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 229;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_3, tmp_import_locals_3, const_tuple_str_plain_DebugTransform_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_DebugTransform );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;
        goto frame_exception_exit_1;
    }
    assert( var_DebugTransform == NULL );
    var_DebugTransform = tmp_assign_source_6;

    tmp_source_name_4 = var_DebugWriter;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_CythonDebugWriter );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 230;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_options;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 231;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_output_dir );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 231;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 231;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 231;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_context;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_gdb_debug_outputwriter, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 230;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    tmp_assign_source_7 = PyList_New( 1 );
    tmp_called_name_4 = var_DebugTransform;

    if ( tmp_called_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "DebugTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_context;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_options;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_result;

    frame_function->f_lineno = 232;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_7 );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_7, 0, tmp_list_element_1 );
    assert( var_debug_transform == NULL );
    var_debug_transform = tmp_assign_source_7;

    goto branch_end_3;
    branch_no_3:;
    tmp_assign_source_8 = PyList_New( 0 );
    assert( var_debug_transform == NULL );
    var_debug_transform = tmp_assign_source_8;

    branch_end_3:;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "itertools" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 236;
        goto frame_exception_exit_1;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_chain );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = PyList_New( 1 );
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_parse_stage_factory );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_parse_stage_factory );
    }

    if ( tmp_called_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "parse_stage_factory" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_context;

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 237;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_args_element_name_6, 0, tmp_list_element_2 );
    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pipeline );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_create_pipeline );
    }

    if ( tmp_called_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "create_pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 238;
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_context;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 238;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_mode;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "mode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 238;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_1 = const_str_plain_exclude_classes;
    tmp_dict_value_1 = par_exclude_classes;

    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 238;
    tmp_args_element_name_8 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 238;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = var_test_support;

    if ( tmp_args_element_name_9 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "test_support" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 239;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_10 = PyList_New( 3 );
    tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_inject_pxd_code_stage_factory );

    if (unlikely( tmp_called_name_8 == NULL ))
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inject_pxd_code_stage_factory );
    }

    if ( tmp_called_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "inject_pxd_code_stage_factory" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 240;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_11 = par_context;

    if ( tmp_args_element_name_11 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 240;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 240;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 240;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_args_element_name_10, 0, tmp_list_element_3 );
    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_inject_utility_code_stage_factory );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inject_utility_code_stage_factory );
    }

    if ( tmp_called_name_9 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "inject_utility_code_stage_factory" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 241;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_12 = par_context;

    if ( tmp_args_element_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 241;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 241;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_args_element_name_10, 1, tmp_list_element_3 );
    tmp_list_element_3 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_abort_on_errors );

    if (unlikely( tmp_list_element_3 == NULL ))
    {
        tmp_list_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_abort_on_errors );
    }

    if ( tmp_list_element_3 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "abort_on_errors" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_3 );
    PyList_SET_ITEM( tmp_args_element_name_10, 2, tmp_list_element_3 );
    tmp_args_element_name_13 = var_debug_transform;

    if ( tmp_args_element_name_13 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "debug_transform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 243;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_14 = PyList_New( 1 );
    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_generate_pyx_code_stage_factory );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_generate_pyx_code_stage_factory );
    }

    if ( tmp_called_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "generate_pyx_code_stage_factory" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 244;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_15 = par_options;

    if ( tmp_args_element_name_15 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_14 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "options" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 244;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_16 = par_result;

    if ( tmp_args_element_name_16 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_14 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "result" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 244;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 244;
    {
        PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
        tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
    }

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 244;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_args_element_name_14, 0, tmp_list_element_4 );
    frame_function->f_lineno = 244;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_13, tmp_args_element_name_14 };
        tmp_list_arg_1 = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_list_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 244;
        goto frame_exception_exit_1;
    }
    tmp_return_value = PySequence_List( tmp_list_arg_1 );
    Py_DECREF( tmp_list_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 244;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_context )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    par_context
                );

                assert( res == 0 );
            }

            if ( par_options )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_options,
                    par_options
                );

                assert( res == 0 );
            }

            if ( par_result )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_result,
                    par_result
                );

                assert( res == 0 );
            }

            if ( par_py )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_py,
                    par_py
                );

                assert( res == 0 );
            }

            if ( par_exclude_classes )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_exclude_classes,
                    par_exclude_classes
                );

                assert( res == 0 );
            }

            if ( var_mode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_mode,
                    var_mode
                );

                assert( res == 0 );
            }

            if ( var_test_support )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_test_support,
                    var_test_support
                );

                assert( res == 0 );
            }

            if ( var_TreeAssertVisitor )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_TreeAssertVisitor,
                    var_TreeAssertVisitor
                );

                assert( res == 0 );
            }

            if ( var_DebugWriter )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_DebugWriter,
                    var_DebugWriter
                );

                assert( res == 0 );
            }

            if ( var_DebugTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_DebugTransform,
                    var_DebugTransform
                );

                assert( res == 0 );
            }

            if ( var_debug_transform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_debug_transform,
                    var_debug_transform
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_options );
    par_options = NULL;

    Py_XDECREF( par_result );
    par_result = NULL;

    Py_XDECREF( par_py );
    par_py = NULL;

    Py_XDECREF( par_exclude_classes );
    par_exclude_classes = NULL;

    Py_XDECREF( var_mode );
    var_mode = NULL;

    Py_XDECREF( var_test_support );
    var_test_support = NULL;

    Py_XDECREF( var_TreeAssertVisitor );
    var_TreeAssertVisitor = NULL;

    Py_XDECREF( var_DebugWriter );
    var_DebugWriter = NULL;

    Py_XDECREF( var_DebugTransform );
    var_DebugTransform = NULL;

    Py_XDECREF( var_debug_transform );
    var_debug_transform = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_options );
    par_options = NULL;

    Py_XDECREF( par_result );
    par_result = NULL;

    Py_XDECREF( par_py );
    par_py = NULL;

    Py_XDECREF( par_exclude_classes );
    par_exclude_classes = NULL;

    Py_XDECREF( var_mode );
    var_mode = NULL;

    Py_XDECREF( var_test_support );
    var_test_support = NULL;

    Py_XDECREF( var_TreeAssertVisitor );
    var_TreeAssertVisitor = NULL;

    Py_XDECREF( var_DebugWriter );
    var_DebugWriter = NULL;

    Py_XDECREF( var_DebugTransform );
    var_DebugTransform = NULL;

    Py_XDECREF( var_debug_transform );
    var_debug_transform = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_context = python_pars[ 0 ];
    PyObject *par_scope = python_pars[ 1 ];
    PyObject *par_module_name = python_pars[ 2 ];
    PyObject *var_ExtractPxdCode = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_afc289f7dd080a45aa2ed2d9ad91df2a, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_scope )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_scope,
            par_scope
        );

        assert( res == 0 );
    }

    if ( par_module_name )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_module_name,
            par_module_name
        );

        assert( res == 0 );
    }

    if ( var_ExtractPxdCode )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ExtractPxdCode,
            var_ExtractPxdCode
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 247;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_CodeGeneration, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_ExtractPxdCode_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_ExtractPxdCode );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    assert( var_ExtractPxdCode == NULL );
    var_ExtractPxdCode = tmp_assign_source_1;

    tmp_left_name_2 = PyList_New( 1 );
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_parse_pxd_stage_factory );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_parse_pxd_stage_factory );
    }

    if ( tmp_called_name_1 == NULL )
    {
        Py_DECREF( tmp_left_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "parse_pxd_stage_factory" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_context;

    tmp_args_element_name_2 = par_scope;

    tmp_args_element_name_3 = par_module_name;

    frame_function->f_lineno = 252;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_2 );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_left_name_2, 0, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pipeline );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_create_pipeline );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "create_pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_context;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_left_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = const_str_plain_pxd;
    frame_function->f_lineno = 253;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_2 );

        exception_lineno = 253;
        goto frame_exception_exit_1;
    }
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_2 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 251;
        goto frame_exception_exit_1;
    }
    tmp_right_name_2 = PyList_New( 1 );
    tmp_called_name_3 = var_ExtractPxdCode;

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ExtractPxdCode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 254;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 254;
    tmp_list_element_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 254;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_right_name_2, 0, tmp_list_element_2 );
    tmp_return_value = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_context )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    par_context
                );

                assert( res == 0 );
            }

            if ( par_scope )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_scope,
                    par_scope
                );

                assert( res == 0 );
            }

            if ( par_module_name )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_module_name,
                    par_module_name
                );

                assert( res == 0 );
            }

            if ( var_ExtractPxdCode )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ExtractPxdCode,
                    var_ExtractPxdCode
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_scope );
    par_scope = NULL;

    Py_XDECREF( par_module_name );
    par_module_name = NULL;

    Py_XDECREF( var_ExtractPxdCode );
    var_ExtractPxdCode = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_scope );
    par_scope = NULL;

    Py_XDECREF( par_module_name );
    par_module_name = NULL;

    Py_XDECREF( var_ExtractPxdCode );
    var_ExtractPxdCode = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_12_create_py_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_context = python_pars[ 0 ];
    PyObject *par_options = python_pars[ 1 ];
    PyObject *par_result = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_47b990ebc745cc14aa03382e46660bf5, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pyx_pipeline );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_create_pyx_pipeline );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "create_pyx_pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_context;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_options;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_result;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_68edf5efba76615c51c2b86e101af95d );
    frame_function->f_lineno = 258;
    tmp_return_value = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_context )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    par_context
                );

                assert( res == 0 );
            }

            if ( par_options )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_options,
                    par_options
                );

                assert( res == 0 );
            }

            if ( par_result )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_result,
                    par_result
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_12_create_py_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_options );
    par_options = NULL;

    Py_XDECREF( par_result );
    par_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_options );
    par_options = NULL;

    Py_XDECREF( par_result );
    par_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_12_create_py_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_context = python_pars[ 0 ];
    PyObject *par_result = python_pars[ 1 ];
    PyObject *var_AlignFunctionDefinitions = NULL;
    PyObject *var_MarkClosureVisitor = NULL;
    PyObject *var_WithTransform = NULL;
    PyObject *var_AnalyseDeclarationsTransform = NULL;
    PyObject *var_ConstantFolding = NULL;
    PyObject *var_FlattenInListTransform = NULL;
    PyCellObject *var_StatListNode = PyCell_EMPTY();
    PyObject *var_pipeline = NULL;
    PyObject *var_pyx_pipeline = NULL;
    PyObject *var_stage = NULL;
    PyObject *var_fake_pxd = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_locals_4;
    PyObject *tmp_import_locals_5;
    PyObject *tmp_import_locals_6;
    PyObject *tmp_import_locals_7;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_156b0654155189bf270aa5bd689f1bb7, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 261;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_1, tmp_import_locals_1, const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_AlignFunctionDefinitions );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    assert( var_AlignFunctionDefinitions == NULL );
    var_AlignFunctionDefinitions = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 261;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_2, tmp_import_locals_2, const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_MarkClosureVisitor );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    assert( var_MarkClosureVisitor == NULL );
    var_MarkClosureVisitor = tmp_assign_source_2;

    tmp_import_globals_3 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 261;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_3, tmp_import_locals_3, const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_WithTransform );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    assert( var_WithTransform == NULL );
    var_WithTransform = tmp_assign_source_3;

    tmp_import_globals_4 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_4 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 261;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_plain_ParseTreeTransforms, tmp_import_globals_4, tmp_import_locals_4, const_tuple_95fc0cdfff94ee937dba6c88023a3182_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_4 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_AnalyseDeclarationsTransform );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        goto frame_exception_exit_1;
    }
    assert( var_AnalyseDeclarationsTransform == NULL );
    var_AnalyseDeclarationsTransform = tmp_assign_source_4;

    tmp_import_globals_5 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_5 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 263;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_5, tmp_import_locals_5, const_tuple_str_plain_ConstantFolding_str_plain_FlattenInListTransform_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_5 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_ConstantFolding );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    assert( var_ConstantFolding == NULL );
    var_ConstantFolding = tmp_assign_source_5;

    tmp_import_globals_6 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_6 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 263;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_plain_Optimize, tmp_import_globals_6, tmp_import_locals_6, const_tuple_str_plain_ConstantFolding_str_plain_FlattenInListTransform_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_6 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_FlattenInListTransform );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    assert( var_FlattenInListTransform == NULL );
    var_FlattenInListTransform = tmp_assign_source_6;

    tmp_import_globals_7 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_7 = PyDict_New();
    if ( par_context )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_context,
            par_context
        );

        assert( res == 0 );
    }

    if ( par_result )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_result,
            par_result
        );

        assert( res == 0 );
    }

    if ( var_AlignFunctionDefinitions )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AlignFunctionDefinitions,
            var_AlignFunctionDefinitions
        );

        assert( res == 0 );
    }

    if ( var_MarkClosureVisitor )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_MarkClosureVisitor,
            var_MarkClosureVisitor
        );

        assert( res == 0 );
    }

    if ( var_WithTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_WithTransform,
            var_WithTransform
        );

        assert( res == 0 );
    }

    if ( var_AnalyseDeclarationsTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_AnalyseDeclarationsTransform,
            var_AnalyseDeclarationsTransform
        );

        assert( res == 0 );
    }

    if ( var_ConstantFolding )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_ConstantFolding,
            var_ConstantFolding
        );

        assert( res == 0 );
    }

    if ( var_FlattenInListTransform )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_FlattenInListTransform,
            var_FlattenInListTransform
        );

        assert( res == 0 );
    }

    if ( var_StatListNode->ob_ref )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_StatListNode,
            var_StatListNode->ob_ref
        );

        assert( res == 0 );
    }

    if ( var_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_pipeline,
            var_pipeline
        );

        assert( res == 0 );
    }

    if ( var_pyx_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_pyx_pipeline,
            var_pyx_pipeline
        );

        assert( res == 0 );
    }

    if ( var_stage )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_stage,
            var_stage
        );

        assert( res == 0 );
    }

    if ( var_fake_pxd )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_fake_pxd,
            var_fake_pxd
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 264;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_plain_Nodes, tmp_import_globals_7, tmp_import_locals_7, const_tuple_str_plain_StatListNode_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_7 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_StatListNode );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( var_StatListNode );
        PyCell_SET( var_StatListNode, tmp_assign_source_7 );
        Py_XDECREF( old );
    }

    tmp_assign_source_8 = PyList_New( 0 );
    assert( var_pipeline == NULL );
    var_pipeline = tmp_assign_source_8;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pyx_pipeline );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_create_pyx_pipeline );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "create_pyx_pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_context;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_source_name_1 = par_context;

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_options );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 266;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_result;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_1 = const_str_plain_exclude_classes;
    tmp_dict_value_1 = PyList_New( 5 );
    tmp_list_element_1 = var_AlignFunctionDefinitions;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_dict_value_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AlignFunctionDefinitions" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 268;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_dict_value_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = var_MarkClosureVisitor;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_dict_value_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "MarkClosureVisitor" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_dict_value_1, 1, tmp_list_element_1 );
    tmp_list_element_1 = var_ConstantFolding;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_dict_value_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ConstantFolding" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 270;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_dict_value_1, 2, tmp_list_element_1 );
    tmp_list_element_1 = var_FlattenInListTransform;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_dict_value_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "FlattenInListTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 271;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_dict_value_1, 3, tmp_list_element_1 );
    tmp_list_element_1 = var_WithTransform;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_dict_value_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "WithTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 272;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_dict_value_1, 4, tmp_list_element_1 );
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 272;
    tmp_assign_source_9 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 272;
        goto frame_exception_exit_1;
    }
    assert( var_pyx_pipeline == NULL );
    var_pyx_pipeline = tmp_assign_source_9;

    tmp_iter_arg_1 = var_pyx_pipeline;

    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 274;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_10;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 274;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_assign_source_12 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_stage;
        var_stage = tmp_assign_source_12;
        Py_INCREF( var_stage );
        Py_XDECREF( old );
    }

    tmp_source_name_2 = var_pipeline;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 275;
        goto try_except_handler_2;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = var_stage;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stage" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 275;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 275;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_isinstance_inst_1 = var_stage;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stage" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 276;
        goto try_except_handler_2;
    }

    tmp_isinstance_cls_1 = var_AnalyseDeclarationsTransform;

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "AnalyseDeclarationsTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 276;
        goto try_except_handler_2;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 274;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_assign_source_13 = MAKE_FUNCTION_function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline( var_StatListNode );
    assert( var_fake_pxd == NULL );
    var_fake_pxd = tmp_assign_source_13;

    tmp_source_name_3 = var_pipeline;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_append );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = var_fake_pxd;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fake_pxd" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 287;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 287;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = var_pipeline;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_context )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_context,
                    par_context
                );

                assert( res == 0 );
            }

            if ( par_result )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_result,
                    par_result
                );

                assert( res == 0 );
            }

            if ( var_AlignFunctionDefinitions )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AlignFunctionDefinitions,
                    var_AlignFunctionDefinitions
                );

                assert( res == 0 );
            }

            if ( var_MarkClosureVisitor )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_MarkClosureVisitor,
                    var_MarkClosureVisitor
                );

                assert( res == 0 );
            }

            if ( var_WithTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_WithTransform,
                    var_WithTransform
                );

                assert( res == 0 );
            }

            if ( var_AnalyseDeclarationsTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_AnalyseDeclarationsTransform,
                    var_AnalyseDeclarationsTransform
                );

                assert( res == 0 );
            }

            if ( var_ConstantFolding )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ConstantFolding,
                    var_ConstantFolding
                );

                assert( res == 0 );
            }

            if ( var_FlattenInListTransform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_FlattenInListTransform,
                    var_FlattenInListTransform
                );

                assert( res == 0 );
            }

            if ( var_StatListNode->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_StatListNode,
                    var_StatListNode->ob_ref
                );

                assert( res == 0 );
            }

            if ( var_pipeline )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_pipeline,
                    var_pipeline
                );

                assert( res == 0 );
            }

            if ( var_pyx_pipeline )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_pyx_pipeline,
                    var_pyx_pipeline
                );

                assert( res == 0 );
            }

            if ( var_stage )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_stage,
                    var_stage
                );

                assert( res == 0 );
            }

            if ( var_fake_pxd )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_fake_pxd,
                    var_fake_pxd
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_result );
    par_result = NULL;

    Py_XDECREF( var_AlignFunctionDefinitions );
    var_AlignFunctionDefinitions = NULL;

    Py_XDECREF( var_MarkClosureVisitor );
    var_MarkClosureVisitor = NULL;

    Py_XDECREF( var_WithTransform );
    var_WithTransform = NULL;

    Py_XDECREF( var_AnalyseDeclarationsTransform );
    var_AnalyseDeclarationsTransform = NULL;

    Py_XDECREF( var_ConstantFolding );
    var_ConstantFolding = NULL;

    Py_XDECREF( var_FlattenInListTransform );
    var_FlattenInListTransform = NULL;

    CHECK_OBJECT( (PyObject *)var_StatListNode );
    Py_DECREF( var_StatListNode );
    var_StatListNode = NULL;

    Py_XDECREF( var_pipeline );
    var_pipeline = NULL;

    Py_XDECREF( var_pyx_pipeline );
    var_pyx_pipeline = NULL;

    Py_XDECREF( var_stage );
    var_stage = NULL;

    Py_XDECREF( var_fake_pxd );
    var_fake_pxd = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_context );
    par_context = NULL;

    Py_XDECREF( par_result );
    par_result = NULL;

    Py_XDECREF( var_AlignFunctionDefinitions );
    var_AlignFunctionDefinitions = NULL;

    Py_XDECREF( var_MarkClosureVisitor );
    var_MarkClosureVisitor = NULL;

    Py_XDECREF( var_WithTransform );
    var_WithTransform = NULL;

    Py_XDECREF( var_AnalyseDeclarationsTransform );
    var_AnalyseDeclarationsTransform = NULL;

    Py_XDECREF( var_ConstantFolding );
    var_ConstantFolding = NULL;

    Py_XDECREF( var_FlattenInListTransform );
    var_FlattenInListTransform = NULL;

    CHECK_OBJECT( (PyObject *)var_StatListNode );
    Py_DECREF( var_StatListNode );
    var_StatListNode = NULL;

    Py_XDECREF( var_pipeline );
    var_pipeline = NULL;

    Py_XDECREF( var_pyx_pipeline );
    var_pyx_pipeline = NULL;

    Py_XDECREF( var_stage );
    var_stage = NULL;

    Py_XDECREF( var_fake_pxd );
    var_fake_pxd = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_root = python_pars[ 0 ];
    PyObject *var_entry = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0c5c7a190b84632f3c21d03fd83e0f78, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = par_root;

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_scope );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_entries );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_values );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 280;
    tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 280;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_entry;
        var_entry = tmp_assign_source_3;
        Py_INCREF( var_entry );
        Py_XDECREF( old );
    }

    tmp_source_name_4 = var_entry;

    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_in_cinclude );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 281;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_assattr_name_1 = const_int_pos_1;
    tmp_assattr_target_1 = var_entry;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 282;
        goto try_except_handler_2;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_defined_in_pxd, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        goto try_except_handler_2;
    }
    tmp_source_name_5 = var_entry;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 283;
        goto try_except_handler_2;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_name );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto try_except_handler_2;
    }
    tmp_source_name_6 = var_entry;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 283;
        goto try_except_handler_2;
    }

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_cname );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 283;
        goto try_except_handler_2;
    }
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 283;
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_7 = var_entry;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 283;
        goto try_except_handler_2;
    }

    tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_visibility );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = const_str_plain_extern;
    tmp_and_right_value_1 = RICH_COMPARE_NE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto try_except_handler_2;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 283;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_9 = var_entry;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 285;
        goto try_except_handler_2;
    }

    tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_scope );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;
        goto try_except_handler_2;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_mangle );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;
        goto try_except_handler_2;
    }
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Naming );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Naming );
    }

    if ( tmp_source_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Naming" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 285;
        goto try_except_handler_2;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_func_prefix );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 285;
        goto try_except_handler_2;
    }
    tmp_source_name_11 = var_entry;

    if ( tmp_source_name_11 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 285;
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_name );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 285;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 285;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assattr_name_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;
        goto try_except_handler_2;
    }
    tmp_assattr_target_2 = var_entry;

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "entry" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 285;
        goto try_except_handler_2;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_cname, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 285;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_assattr_name_2 );
    branch_no_2:;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = PyTuple_New( 2 );
    tmp_called_name_3 = PyCell_GET( self->m_closure[0] );

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "StatListNode" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_source_name_12 = par_root;

    if ( tmp_source_name_12 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "root" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_pos );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
    tmp_kw_name_1 = DEEP_COPY( const_dict_b04ac8cd9e2e0515f2c97f8c939bc3fe );
    frame_function->f_lineno = 286;
    tmp_tuple_element_1 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_source_name_13 = par_root;

    if ( tmp_source_name_13 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "root" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_scope );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 286;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_root )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_root,
                    par_root
                );

                assert( res == 0 );
            }

            if ( var_entry )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_entry,
                    var_entry
                );

                assert( res == 0 );
            }

            if ( self->m_closure[0]->ob_ref )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_StatListNode,
                    self->m_closure[0]->ob_ref
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_root );
    par_root = NULL;

    Py_XDECREF( var_entry );
    var_entry = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_root );
    par_root = NULL;

    Py_XDECREF( var_entry );
    var_entry = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_pipeline = python_pars[ 0 ];
    PyObject *par_transform = python_pars[ 1 ];
    PyObject *par_before = python_pars[ 2 ];
    PyObject *par_after = python_pars[ 3 ];
    PyObject *var_cls = NULL;
    PyObject *var_i = NULL;
    PyObject *var_t = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_called_name_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_start_name_1;
    PyObject *tmp_start_name_2;
    PyObject *tmp_step_name_1;
    PyObject *tmp_step_name_2;
    PyObject *tmp_stop_name_1;
    PyObject *tmp_stop_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bae742f65d1d6c0fc7ceea65dd90a4f3, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_or_left_value_1 = par_before;

    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 298;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_or_right_value_1 = par_after;

    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 298;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_raise_type_1 = PyExc_AssertionError;
    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_lineno = 298;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_or_left_value_2 = par_before;

    if ( tmp_or_left_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "before" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }

    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    tmp_or_right_value_2 = par_after;

    if ( tmp_or_right_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "after" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_1 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_assign_source_1 = tmp_or_left_value_2;
    or_end_2:;
    assert( var_cls == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_cls = tmp_assign_source_1;

    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = par_pipeline;

    frame_function->f_lineno = 301;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 301;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 301;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 301;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 301;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 301;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 301;
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_7;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;

    {
        PyObject *old = var_t;
        var_t = tmp_assign_source_8;
        Py_INCREF( var_t );
        Py_XDECREF( old );
    }

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_isinstance_inst_1 = var_t;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "t" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 302;
        goto try_except_handler_2;
    }

    tmp_isinstance_cls_1 = var_cls;

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "cls" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 302;
        goto try_except_handler_2;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 302;
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 301;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_cond_value_2 = par_after;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "after" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_left_name_1 = var_i;

    if ( tmp_left_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "i" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }

    tmp_right_name_1 = const_int_pos_1;
    tmp_result = BINARY_OPERATION_ADD_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
    tmp_assign_source_9 = tmp_left_name_1;
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    var_i = tmp_assign_source_9;

    branch_no_3:;
    tmp_subscribed_name_1 = par_pipeline;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_start_name_1 = Py_None;
    tmp_stop_name_1 = var_i;

    if ( tmp_stop_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "i" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_step_name_1 = Py_None;
    tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
    assert( tmp_subscript_name_1 != NULL );
    tmp_left_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;
        goto frame_exception_exit_1;
    }
    tmp_right_name_2 = PyList_New( 1 );
    tmp_list_element_1 = par_transform;

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_right_name_2, 0, tmp_list_element_1 );
    tmp_left_name_2 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_3 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_2 = par_pipeline;

    if ( tmp_subscribed_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pipeline" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_start_name_2 = var_i;

    if ( tmp_start_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "i" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_stop_name_2 = Py_None;
    tmp_step_name_2 = Py_None;
    tmp_subscript_name_2 = MAKE_SLICEOBJ3( tmp_start_name_2, tmp_stop_name_2, tmp_step_name_2 );
    assert( tmp_subscript_name_2 != NULL );
    tmp_right_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscript_name_2 );
    if ( tmp_right_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_2 );

        exception_lineno = 308;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_2 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_pipeline )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_pipeline,
                    par_pipeline
                );

                assert( res == 0 );
            }

            if ( par_transform )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_transform,
                    par_transform
                );

                assert( res == 0 );
            }

            if ( par_before )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_before,
                    par_before
                );

                assert( res == 0 );
            }

            if ( par_after )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_after,
                    par_after
                );

                assert( res == 0 );
            }

            if ( var_cls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cls,
                    var_cls
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_t )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_t,
                    var_t
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_pipeline );
    par_pipeline = NULL;

    Py_XDECREF( par_transform );
    par_transform = NULL;

    Py_XDECREF( par_before );
    par_before = NULL;

    Py_XDECREF( par_after );
    par_after = NULL;

    Py_XDECREF( var_cls );
    var_cls = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_pipeline );
    par_pipeline = NULL;

    Py_XDECREF( par_transform );
    par_transform = NULL;

    Py_XDECREF( par_before );
    par_before = NULL;

    Py_XDECREF( par_after );
    par_after = NULL;

    Py_XDECREF( var_cls );
    var_cls = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_15_run_pipeline_of_Cython$Compiler$Pipeline( Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_pipeline = python_pars[ 0 ];
    PyObject *par_source = python_pars[ 1 ];
    PyObject *par_printtree = python_pars[ 2 ];
    PyObject *var_PrintTree = NULL;
    PyObject *var_error = NULL;
    PyObject *var_data = NULL;
    PyObject *var_phase = NULL;
    PyObject *var_t = NULL;
    PyObject *var_err = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_78cddeb0c869935939a3106e808244b7, module_Cython$Compiler$Pipeline );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ( par_pipeline )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_pipeline,
            par_pipeline
        );

        assert( res == 0 );
    }

    if ( par_source )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_source,
            par_source
        );

        assert( res == 0 );
    }

    if ( par_printtree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_printtree,
            par_printtree
        );

        assert( res == 0 );
    }

    if ( var_PrintTree )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_PrintTree,
            var_PrintTree
        );

        assert( res == 0 );
    }

    if ( var_error )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_error,
            var_error
        );

        assert( res == 0 );
    }

    if ( var_data )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_data,
            var_data
        );

        assert( res == 0 );
    }

    if ( var_phase )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_phase,
            var_phase
        );

        assert( res == 0 );
    }

    if ( var_t )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_t,
            var_t
        );

        assert( res == 0 );
    }

    if ( var_err )
    {
        int res = PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err,
            var_err
        );

        assert( res == 0 );
    }

    frame_function->f_lineno = 315;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_Visitor, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_PrintTree_tuple, const_int_pos_1 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_PrintTree );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;
        goto frame_exception_exit_1;
    }
    assert( var_PrintTree == NULL );
    var_PrintTree = tmp_assign_source_1;

    tmp_assign_source_2 = Py_None;
    assert( var_error == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_error = tmp_assign_source_2;

    tmp_assign_source_3 = par_source;

    assert( var_data == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_data = tmp_assign_source_3;

    // Tried code:
    // Tried code:
    tmp_iter_arg_1 = par_pipeline;

    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 321;
        goto try_except_handler_3;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 321;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_phase;
        var_phase = tmp_assign_source_6;
        Py_INCREF( var_phase );
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = var_phase;

    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_DebugFlags );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DebugFlags );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DebugFlags" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 323;
        goto try_except_handler_4;
    }

    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_debug_verbose_pipeline );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 323;
        goto try_except_handler_4;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 323;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 324;
        goto try_except_handler_4;
    }

    frame_function->f_lineno = 324;
    tmp_assign_source_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 324;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_t;
        var_t = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_print );
    assert( tmp_called_name_2 != NULL );
    tmp_left_name_1 = const_str_digest_d80340087fe4ac070886b161e37f7ea5;
    tmp_right_name_1 = var_phase;

    if ( tmp_right_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "phase" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 325;
        goto try_except_handler_4;
    }

    tmp_args_element_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 325;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 325;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 325;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    tmp_operand_name_1 = par_printtree;

    tmp_and_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        goto try_except_handler_4;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        goto try_except_handler_4;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_isinstance_inst_1 = var_phase;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "phase" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 326;
        goto try_except_handler_4;
    }

    tmp_isinstance_cls_1 = var_PrintTree;

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "PrintTree" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 326;
        goto try_except_handler_4;
    }

    tmp_and_right_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        goto try_except_handler_4;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        goto try_except_handler_4;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    goto loop_start_1;
    branch_no_3:;
    tmp_called_name_3 = var_phase;

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "phase" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 328;
        goto try_except_handler_4;
    }

    tmp_args_element_name_2 = var_data;

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 328;
        goto try_except_handler_4;
    }

    frame_function->f_lineno = 328;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_data;
        var_data = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_DebugFlags );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DebugFlags );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DebugFlags" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 329;
        goto try_except_handler_4;
    }

    tmp_cond_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_debug_verbose_pipeline );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 329;
        goto try_except_handler_4;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 329;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_print );
    assert( tmp_called_name_4 != NULL );
    tmp_left_name_2 = const_str_digest_a5f4f65a7c9adecf4c6831cff65c2a01;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 330;
        goto try_except_handler_4;
    }

    frame_function->f_lineno = 330;
    tmp_left_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 330;
        goto try_except_handler_4;
    }
    tmp_right_name_3 = var_t;

    if ( tmp_right_name_3 == NULL )
    {
        Py_DECREF( tmp_left_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "t" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 330;
        goto try_except_handler_4;
    }

    tmp_right_name_2 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_3 );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 330;
        goto try_except_handler_4;
    }
    tmp_args_element_name_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 330;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 330;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 330;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 321;
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != -1 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_function, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PyException_SetTraceback( exception_keeper_value_2, (PyObject *)exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    // Tried code:
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_CompileError );

    if (unlikely( tmp_compare_right_2 == NULL ))
    {
        tmp_compare_right_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CompileError );
    }

    if ( tmp_compare_right_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CompileError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 331;
        goto try_except_handler_5;
    }

    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 331;
        goto try_except_handler_5;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_9 = PyThreadState_GET()->exc_value;
    assert( var_err == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var_err = tmp_assign_source_9;

    // Tried code:
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Errors );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Errors );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Errors" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 333;
        goto try_except_handler_6;
    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_report_error );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 333;
        goto try_except_handler_6;
    }
    tmp_args_element_name_4 = var_err;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 333;
        goto try_except_handler_6;
    }

    frame_function->f_lineno = 333;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 333;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_10 = var_err;

    if ( tmp_assign_source_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 334;
        goto try_except_handler_6;
    }

    {
        PyObject *old = var_error;
        var_error = tmp_assign_source_10;
        Py_INCREF( var_error );
        Py_XDECREF( old );
    }

    goto try_end_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var_err );
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // End of try:
    try_end_3:;
    Py_XDECREF( var_err );
    var_err = NULL;

    goto branch_end_5;
    branch_no_5:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_except_handler_5;
    branch_end_5:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_2;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_15_run_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // End of try:
    try_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Preserve existing published exception.
    exception_preserved_type_2 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_5 == NULL )
    {
        exception_keeper_tb_5 = MAKE_TRACEBACK( frame_function, exception_keeper_lineno_5 );
    }
    else if ( exception_keeper_lineno_5 != -1 )
    {
        exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_function, exception_keeper_lineno_5 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
    PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    // Tried code:
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_InternalError );

    if (unlikely( tmp_compare_right_3 == NULL ))
    {
        tmp_compare_right_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InternalError );
    }

    if ( tmp_compare_right_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "InternalError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 335;
        goto try_except_handler_7;
    }

    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;
        goto try_except_handler_7;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_11 = PyThreadState_GET()->exc_value;
    {
        PyObject *old = var_err;
        var_err = tmp_assign_source_11;
        Py_INCREF( var_err );
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Errors );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Errors );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Errors" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 337;
        goto try_except_handler_8;
    }

    tmp_compare_left_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_num_errors );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 337;
        goto try_except_handler_8;
    }
    tmp_compare_right_4 = const_int_0;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_4 );

        exception_lineno = 337;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_except_handler_8;
    branch_no_7:;
    tmp_assign_source_12 = var_err;

    if ( tmp_assign_source_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 339;
        goto try_except_handler_8;
    }

    {
        PyObject *old = var_error;
        var_error = tmp_assign_source_12;
        Py_INCREF( var_error );
        Py_XDECREF( old );
    }

    goto try_end_6;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var_err );
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_7;
    // End of try:
    try_end_6:;
    Py_XDECREF( var_err );
    var_err = NULL;

    goto branch_end_6;
    branch_no_6:;
    tmp_compare_left_5 = PyThreadState_GET()->exc_type;
    tmp_compare_right_5 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_AbortError );

    if (unlikely( tmp_compare_right_5 == NULL ))
    {
        tmp_compare_right_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AbortError );
    }

    if ( tmp_compare_right_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "AbortError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 340;
        goto try_except_handler_7;
    }

    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;
        goto try_except_handler_7;
    }
    if ( tmp_exc_match_exception_match_3 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_assign_source_13 = PyThreadState_GET()->exc_value;
    {
        PyObject *old = var_err;
        var_err = tmp_assign_source_13;
        Py_INCREF( var_err );
        Py_XDECREF( old );
    }

    tmp_assign_source_14 = var_err;

    {
        PyObject *old = var_error;
        var_error = tmp_assign_source_14;
        Py_INCREF( var_error );
        Py_XDECREF( old );
    }

    Py_XDECREF( var_err );
    var_err = NULL;

    goto branch_end_8;
    branch_no_8:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_except_handler_7;
    branch_end_8:;
    branch_end_6:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_5;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_15_run_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // End of try:
    try_end_5:;
    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_error;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "error" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 342;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_data;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 342;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_pipeline )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_pipeline,
                    par_pipeline
                );

                assert( res == 0 );
            }

            if ( par_source )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_source,
                    par_source
                );

                assert( res == 0 );
            }

            if ( par_printtree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_printtree,
                    par_printtree
                );

                assert( res == 0 );
            }

            if ( var_PrintTree )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_PrintTree,
                    var_PrintTree
                );

                assert( res == 0 );
            }

            if ( var_error )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_error,
                    var_error
                );

                assert( res == 0 );
            }

            if ( var_data )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_data,
                    var_data
                );

                assert( res == 0 );
            }

            if ( var_phase )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_phase,
                    var_phase
                );

                assert( res == 0 );
            }

            if ( var_t )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_t,
                    var_t
                );

                assert( res == 0 );
            }

            if ( var_err )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_err,
                    var_err
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( function_15_run_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_pipeline );
    par_pipeline = NULL;

    Py_XDECREF( par_source );
    par_source = NULL;

    Py_XDECREF( par_printtree );
    par_printtree = NULL;

    Py_XDECREF( var_PrintTree );
    var_PrintTree = NULL;

    Py_XDECREF( var_error );
    var_error = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_phase );
    var_phase = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    Py_XDECREF( var_err );
    var_err = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( par_pipeline );
    par_pipeline = NULL;

    Py_XDECREF( par_source );
    par_source = NULL;

    Py_XDECREF( par_printtree );
    par_printtree = NULL;

    Py_XDECREF( var_PrintTree );
    var_PrintTree = NULL;

    Py_XDECREF( var_error );
    var_error = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_phase );
    var_phase = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    Py_XDECREF( var_err );
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_15_run_pipeline_of_Cython$Compiler$Pipeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_create_pyx_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_226f06ad5974da6f07e4f967569543cc,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_create_pxd_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_afc289f7dd080a45aa2ed2d9ad91df2a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_create_py_pipeline_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_12_create_py_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_create_py_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_47b990ebc745cc14aa03382e46660bf5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_create_pyx_as_pxd_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_156b0654155189bf270aa5bd689f1bb7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_insert_into_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bae742f65d1d6c0fc7ceea65dd90a4f3,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        const_str_digest_ebf1de03f96c7f61c209dd04c8eec8e9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_run_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_15_run_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_run_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_78cddeb0c869935939a3106e808244b7,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_1___call___of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline,
        const_str_plain___call__,
#if PYTHON_VERSION >= 330
        const_str_digest_2658a501bd6c823a047d9bc5d047ef55,
#endif
        codeobj_366a0b04a257f76ffcd7d411796e20c2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_dumptree_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_1_dumptree_of_Cython$Compiler$Pipeline,
        const_str_plain_dumptree,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1214b9ecf6c00e901136477a5a3c3665,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline( PyCellObject *closure_StatListNode )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
    closure[0] = closure_StatListNode;
    Py_INCREF( closure[0] );


    PyObject *result = Nuitka_Function_New(
        impl_function_1_fake_pxd_of_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_fake_pxd,
#if PYTHON_VERSION >= 330
        const_str_digest_f41b3d39d6000c17326ae3c2e6644094,
#endif
        codeobj_0c5c7a190b84632f3c21d03fd83e0f78,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None,
        closure,
        1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_options, PyCellObject *closure_result )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(2 * sizeof(PyCellObject *));
    closure[0] = closure_options;
    Py_INCREF( closure[0] );
    closure[1] = closure_result;
    Py_INCREF( closure[1] );


    PyObject *result = Nuitka_Function_New(
        impl_function_1_generate_pyx_code_stage_of_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_generate_pyx_code_stage,
#if PYTHON_VERSION >= 330
        const_str_digest_e2a1171fb02c6a0e1759b89de5616e58,
#endif
        codeobj_14874ce35a9f852dc4bb3954e34d4d90,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None,
        closure,
        2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
    closure[0] = closure_context;
    Py_INCREF( closure[0] );


    PyObject *result = Nuitka_Function_New(
        impl_function_1_inject_pxd_code_stage_of_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_inject_pxd_code_stage,
#if PYTHON_VERSION >= 330
        const_str_digest_28039f56d452e5b7e6ce32e2edf25948,
#endif
        codeobj_551b28d812e90173b403145d9fd18428,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None,
        closure,
        1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
    closure[0] = closure_context;
    Py_INCREF( closure[0] );


    PyObject *result = Nuitka_Function_New(
        impl_function_1_inject_utility_code_stage_of_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_inject_utility_code_stage,
#if PYTHON_VERSION >= 330
        const_str_digest_9f2b825296c8566c21c81531d1eecfe9,
#endif
        codeobj_583dc5a975da6ae6052ddee60440c0cc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None,
        closure,
        1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(1 * sizeof(PyCellObject *));
    closure[0] = closure_context;
    Py_INCREF( closure[0] );


    PyObject *result = Nuitka_Function_New(
        impl_function_1_parse_of_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_parse,
#if PYTHON_VERSION >= 330
        const_str_digest_43100357bb1ebc653312230f63cd67b2,
#endif
        codeobj_6cd51f416952a7d68824e5c693e01eca,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None,
        closure,
        1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline( PyCellObject *closure_context, PyCellObject *closure_module_name, PyCellObject *closure_scope )
{
    // Copy the parameter default values and closure values over.
    PyCellObject **closure = (PyCellObject **)malloc(3 * sizeof(PyCellObject *));
    closure[0] = closure_context;
    Py_INCREF( closure[0] );
    closure[1] = closure_module_name;
    Py_INCREF( closure[1] );
    closure[2] = closure_scope;
    Py_INCREF( closure[2] );


    PyObject *result = Nuitka_Function_New(
        impl_function_1_parse_of_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_parse,
#if PYTHON_VERSION >= 330
        const_str_digest_3d6f0da3f5c61bebbd7dd3a959541047,
#endif
        codeobj_e2fabb57ddd861887d6b8b5a41bd6316,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None,
        closure,
        3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_abort_on_errors_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_2_abort_on_errors_of_Cython$Compiler$Pipeline,
        const_str_plain_abort_on_errors,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0a1d5dfb0748763652a6bb18ab8f84f6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_2_process_entry_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline,
        const_str_plain_process_entry,
#if PYTHON_VERSION >= 330
        const_str_digest_095a20d5973a70df0f77628b6979e4d1,
#endif
        codeobj_8664405c60af6f47ce46de87c60023d1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_parse_stage_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b1d9350d54b81fd0da48b8fb3fae76a1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_3_visit_AttributeNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline,
        const_str_plain_visit_AttributeNode,
#if PYTHON_VERSION >= 330
        const_str_digest_a07f1e52b116ab352a9850787396e6c8,
#endif
        codeobj_41f994bdd92b8ed42eb98eef4acd31e8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_parse_pxd_stage_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f11b6db3a396c985c212ef00de732e8a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_4_visit_NameNode_of_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline,
        const_str_plain_visit_NameNode,
#if PYTHON_VERSION >= 330
        const_str_digest_894dd887b95446df8fb995c57df0ee94,
#endif
        codeobj_016289b6af13d7d461be601f74a89ffd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_generate_pyx_code_stage_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_edde32cd35e620a543ddda709e1ca34b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_inject_pxd_code_stage_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9c9fd19bef320511b323c09d7401b40f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline,
        const_str_plain_use_utility_code_definitions,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3324bbeedfc0cca12d87bb73d748e5a3,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline(  )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline,
        const_str_plain_inject_utility_code_stage_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_93ab845dba21b6fe21f6f9cccf4e5d40,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_create_pipeline_of_Cython$Compiler$Pipeline( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        impl_function_9_create_pipeline_of_Cython$Compiler$Pipeline,
        const_str_plain_create_pipeline,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e131cbfebddadcb5d39c26cdbb24a43c,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_Cython$Compiler$Pipeline,
        Py_None
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_Cython$Compiler$Pipeline =
{
    PyModuleDef_HEAD_INIT,
    "Cython.Compiler.Pipeline",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( Cython$Compiler$Pipeline )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_Cython$Compiler$Pipeline );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION >= 350
    PyType_Ready( &Nuitka_Coroutine_Type );
    PyType_Ready( &Nuitka_CoroutineWrapper_Type );
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    createModuleConstants();
    createModuleCodeObjects();

    // puts( "in initCython$Compiler$Pipeline" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_Cython$Compiler$Pipeline = Py_InitModule4(
        "Cython.Compiler.Pipeline",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_Cython$Compiler$Pipeline = PyModule_Create( &mdef_Cython$Compiler$Pipeline );
#endif

    moduledict_Cython$Compiler$Pipeline = (PyDictObject *)((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;

    CHECK_OBJECT( module_Cython$Compiler$Pipeline );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_454ef293d7174a6d3e64d06e805470ad, module_Cython$Compiler$Pipeline );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_Cython$Compiler$Pipeline );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *tmp_Cython$Compiler$Pipeline_class_creation_1__bases = NULL;
    PyObject *tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass = NULL;
    PyObject *tmp_Cython$Compiler$Pipeline_class_creation_1__prepared = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_called_name_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_key_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_metaclass_name_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_type_arg_1;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = Py_None;
    UPDATE_STRING_DICT0( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = module_filename_obj;
    UPDATE_STRING_DICT0( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = Py_None;
    UPDATE_STRING_DICT0( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    tmp_assign_source_4 = const_str_digest_725e8123044bef1b6c84c1319cf2b97a;
    UPDATE_STRING_DICT0( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_4 );
    tmp_assign_source_5 = PyObject_GetAttrString(PyImport_ImportModule("__future__"), "absolute_import");
    UPDATE_STRING_DICT0( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_5 );
    // Frame without reuse.
    frame_module = MAKE_MODULE_FRAME( codeobj_6d54a748c440cba599df0062e2a11732, module_Cython$Compiler$Pipeline );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 3;
    tmp_assign_source_6 = IMPORT_MODULE( const_str_plain_itertools, tmp_import_globals_1, tmp_import_globals_1, Py_None, const_int_0 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_6 );
    tmp_import_globals_2 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 4;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_time, tmp_import_globals_2, tmp_import_globals_2, const_tuple_str_plain_time_tuple, const_int_0 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 4;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_time );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 4;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_7 );
    tmp_import_globals_3 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 6;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_empty, tmp_import_globals_3, tmp_import_globals_3, const_tuple_str_plain_Errors_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 6;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_Errors );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 6;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Errors, tmp_assign_source_8 );
    tmp_import_globals_4 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 7;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_empty, tmp_import_globals_4, tmp_import_globals_4, const_tuple_str_plain_DebugFlags_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 7;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_DebugFlags );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 7;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_DebugFlags, tmp_assign_source_9 );
    tmp_import_globals_5 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 8;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_empty, tmp_import_globals_5, tmp_import_globals_5, const_tuple_str_plain_Options_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 8;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_Options );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 8;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Options, tmp_assign_source_10 );
    tmp_import_globals_6 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 9;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_plain_Visitor, tmp_import_globals_6, tmp_import_globals_6, const_tuple_str_plain_CythonTransform_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 9;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_CythonTransform );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 9;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_CythonTransform, tmp_assign_source_11 );
    tmp_import_globals_7 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_plain_Errors, tmp_import_globals_7, tmp_import_globals_7, const_tuple_00c469742b10624418228d9310be3574_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_CompileError );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_CompileError, tmp_assign_source_12 );
    tmp_import_globals_8 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_plain_Errors, tmp_import_globals_8, tmp_import_globals_8, const_tuple_00c469742b10624418228d9310be3574_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_InternalError );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_InternalError, tmp_assign_source_13 );
    tmp_import_globals_9 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_plain_Errors, tmp_import_globals_9, tmp_import_globals_9, const_tuple_00c469742b10624418228d9310be3574_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_AbortError );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_AbortError, tmp_assign_source_14 );
    tmp_import_globals_10 = ((PyModuleObject *)module_Cython$Compiler$Pipeline)->md_dict;
    frame_module->f_lineno = 11;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_empty, tmp_import_globals_10, tmp_import_globals_10, const_tuple_str_plain_Naming_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 11;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_Naming );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 11;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_Naming, tmp_assign_source_15 );
    tmp_assign_source_16 = MAKE_FUNCTION_function_1_dumptree_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_dumptree, tmp_assign_source_16 );
    tmp_assign_source_17 = MAKE_FUNCTION_function_2_abort_on_errors_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_abort_on_errors, tmp_assign_source_17 );
    tmp_assign_source_18 = MAKE_FUNCTION_function_3_parse_stage_factory_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_parse_stage_factory, tmp_assign_source_18 );
    tmp_assign_source_19 = MAKE_FUNCTION_function_4_parse_pxd_stage_factory_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_parse_pxd_stage_factory, tmp_assign_source_19 );
    tmp_assign_source_20 = MAKE_FUNCTION_function_5_generate_pyx_code_stage_factory_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_generate_pyx_code_stage_factory, tmp_assign_source_20 );
    tmp_assign_source_21 = MAKE_FUNCTION_function_6_inject_pxd_code_stage_factory_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_inject_pxd_code_stage_factory, tmp_assign_source_21 );
    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_22 = MAKE_FUNCTION_function_7_use_utility_code_definitions_of_Cython$Compiler$Pipeline( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_use_utility_code_definitions, tmp_assign_source_22 );
    tmp_assign_source_23 = MAKE_FUNCTION_function_8_inject_utility_code_stage_factory_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_inject_utility_code_stage_factory, tmp_assign_source_23 );
    // Tried code:
    tmp_assign_source_24 = PyTuple_New( 1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_CythonTransform );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CythonTransform );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CythonTransform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 101;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_24, 0, tmp_tuple_element_1 );
    assert( tmp_Cython$Compiler$Pipeline_class_creation_1__bases == NULL );
    tmp_Cython$Compiler$Pipeline_class_creation_1__bases = tmp_assign_source_24;

    tmp_assign_source_25 = PyDict_New();
    assert( tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict == NULL );
    tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict = tmp_assign_source_25;

    tmp_compare_left_1 = const_str_plain_metaclass;
    tmp_compare_right_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict;

    tmp_key_name_1 = const_str_plain_metaclass;
    tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_metaclass_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__bases;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_subscribed_name_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__bases;

    tmp_subscript_name_1 = const_int_0;
    tmp_type_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_type_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    Py_DECREF( tmp_type_arg_1 );
    if ( tmp_metaclass_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_metaclass_name_1 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_metaclass_name_1 != NULL );
    Py_INCREF( tmp_metaclass_name_1 );
    condexpr_end_2:;
    condexpr_end_1:;
    tmp_bases_name_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__bases;

    tmp_assign_source_26 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_1 );

        exception_lineno = 101;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_metaclass_name_1 );
    assert( tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass == NULL );
    tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass = tmp_assign_source_26;

    tmp_compare_left_2 = const_str_plain_metaclass;
    tmp_compare_right_2 = tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_dictdel_dict = tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict;

    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    branch_no_1:;
    tmp_hasattr_source_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass;

    tmp_hasattr_attr_1 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_source_name_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___prepare__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = const_str_plain_UseUtilityCodeDefinitions;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = tmp_Cython$Compiler$Pipeline_class_creation_1__bases;

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_2 );
    tmp_kw_name_1 = tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict;

    frame_module->f_lineno = 101;
    tmp_assign_source_27 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_assign_source_27 = PyDict_New();
    condexpr_end_3:;
    assert( tmp_Cython$Compiler$Pipeline_class_creation_1__prepared == NULL );
    tmp_Cython$Compiler$Pipeline_class_creation_1__prepared = tmp_assign_source_27;

    tmp_assign_source_28 = impl_class_1_UseUtilityCodeDefinitions_of_Cython$Compiler$Pipeline( NULL, tmp_Cython$Compiler$Pipeline_class_creation_1__bases, tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict, tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass, tmp_Cython$Compiler$Pipeline_class_creation_1__prepared );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_UseUtilityCodeDefinitions, tmp_assign_source_28 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__bases );
    tmp_Cython$Compiler$Pipeline_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict );
    tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass );
    tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__prepared );
    tmp_Cython$Compiler$Pipeline_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module, exception_lineno );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module, exception_lineno );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;
    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__bases );
    tmp_Cython$Compiler$Pipeline_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict );
    tmp_Cython$Compiler$Pipeline_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass );
    tmp_Cython$Compiler$Pipeline_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_Cython$Compiler$Pipeline_class_creation_1__prepared );
    tmp_Cython$Compiler$Pipeline_class_creation_1__prepared = NULL;

    tmp_defaults_2 = const_tuple_tuple_empty_tuple;
    tmp_assign_source_29 = MAKE_FUNCTION_function_9_create_pipeline_of_Cython$Compiler$Pipeline( INCREASE_REFCOUNT( tmp_defaults_2 ) );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pipeline, tmp_assign_source_29 );
    tmp_defaults_3 = const_tuple_false_tuple_empty_tuple;
    tmp_assign_source_30 = MAKE_FUNCTION_function_10_create_pyx_pipeline_of_Cython$Compiler$Pipeline( INCREASE_REFCOUNT( tmp_defaults_3 ) );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pyx_pipeline, tmp_assign_source_30 );
    tmp_assign_source_31 = MAKE_FUNCTION_function_11_create_pxd_pipeline_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pxd_pipeline, tmp_assign_source_31 );
    tmp_assign_source_32 = MAKE_FUNCTION_function_12_create_py_pipeline_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_py_pipeline, tmp_assign_source_32 );
    tmp_assign_source_33 = MAKE_FUNCTION_function_13_create_pyx_as_pxd_pipeline_of_Cython$Compiler$Pipeline(  );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_create_pyx_as_pxd_pipeline, tmp_assign_source_33 );
    tmp_defaults_4 = const_tuple_none_none_tuple;
    tmp_assign_source_34 = MAKE_FUNCTION_function_14_insert_into_pipeline_of_Cython$Compiler$Pipeline( INCREASE_REFCOUNT( tmp_defaults_4 ) );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_insert_into_pipeline, tmp_assign_source_34 );
    tmp_defaults_5 = const_tuple_true_tuple;
    tmp_assign_source_35 = MAKE_FUNCTION_function_15_run_pipeline_of_Cython$Compiler$Pipeline( INCREASE_REFCOUNT( tmp_defaults_5 ) );
    UPDATE_STRING_DICT1( moduledict_Cython$Compiler$Pipeline, (Nuitka_StringObject *)const_str_plain_run_pipeline, tmp_assign_source_35 );

    return MOD_RETURN_VALUE( module_Cython$Compiler$Pipeline );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
